"use strict";/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_xll5socwd(){var path="/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/AwsXrayIdGenerator.ts";var hash="64d2e6cfd99e1237ee4528730d4e96669ea77604";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/AwsXrayIdGenerator.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:36}},"2":{start:{line:19,column:15},end:{line:19,column:32}},"3":{start:{line:20,column:22},end:{line:20,column:23}},"4":{start:{line:21,column:23},end:{line:21,column:25}},"5":{start:{line:22,column:19},end:{line:22,column:20}},"6":{start:{line:33,column:23},end:{line:33,column:65}},"7":{start:{line:34,column:8},end:{line:34,column:90}},"8":{start:{line:41,column:8},end:{line:41,column:65}},"9":{start:{line:44,column:0},end:{line:44,column:48}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:22},end:{line:35,column:5}},line:32},"1":{name:"(anonymous_1)",decl:{start:{line:40,column:4},end:{line:40,column:5}},loc:{start:{line:40,column:21},end:{line:42,column:5}},line:40}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,file:"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/AwsXrayIdGenerator.ts",sources:["/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/AwsXrayIdGenerator.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,iCAAiC;AAGjC,MAAM,aAAa,GAAG,CAAC,CAAC;AACxB,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,MAAM,UAAU,GAAG,CAAC,CAAC;AAErB;;GAEG;AACH,MAAa,kBAAkB;IAC7B;;;;OAIG;IACH,eAAe;QACb,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1D,OAAO,CACL,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,cAAc,GAAG,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CACzE,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;CACF;AApBD,gDAoBC",sourcesContent:["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as crypto from 'crypto';\nimport { IdGenerator } from '@opentelemetry/core';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\nconst TIME_BYTES = 4;\n\n/** IdGenerator that generates trace IDs conforming to AWS X-Ray format.\n * https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids\n */\nexport class AwsXrayIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits. The first 4 bytes correspond to the current\n   * time, in seconds, as per X-Ray trace ID format.\n   */\n  generateTraceId(): string {\n    const nowSec = Math.floor(Date.now() / 1000).toString(16);\n    return (\n      nowSec + crypto.randomBytes(TRACE_ID_BYTES - TIME_BYTES).toString('hex')\n    );\n  }\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId(): string {\n    return crypto.randomBytes(SPAN_ID_BYTES).toString('hex');\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"64d2e6cfd99e1237ee4528730d4e96669ea77604"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_xll5socwd=function(){return actualCoverage;};}return actualCoverage;}cov_xll5socwd();cov_xll5socwd().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_xll5socwd().s[1]++;exports.AwsXrayIdGenerator=void 0;const crypto=(cov_xll5socwd().s[2]++,require("crypto"));const SPAN_ID_BYTES=(cov_xll5socwd().s[3]++,8);const TRACE_ID_BYTES=(cov_xll5socwd().s[4]++,16);const TIME_BYTES=(cov_xll5socwd().s[5]++,4);/** IdGenerator that generates trace IDs conforming to AWS X-Ray format.
 * https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids
 */class AwsXrayIdGenerator{/**
     * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex
     * characters corresponding to 128 bits. The first 4 bytes correspond to the current
     * time, in seconds, as per X-Ray trace ID format.
     */generateTraceId(){cov_xll5socwd().f[0]++;const nowSec=(cov_xll5socwd().s[6]++,Math.floor(Date.now()/1000).toString(16));cov_xll5socwd().s[7]++;return nowSec+crypto.randomBytes(TRACE_ID_BYTES-TIME_BYTES).toString('hex');}/**
     * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex
     * characters corresponding to 64 bits.
     */generateSpanId(){cov_xll5socwd().f[1]++;cov_xll5socwd().s[8]++;return crypto.randomBytes(SPAN_ID_BYTES).toString('hex');}}cov_xll5socwd().s[9]++;exports.AwsXrayIdGenerator=AwsXrayIdGenerator;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3pvY29uZy9Eb2N1bWVudHMvZm9ya2VkL2F3cy1vcGVudGVsZW1ldHJ5LWpzL3BhY2thZ2VzL29wZW50ZWxlbWV0cnktaWQtZ2VuZXJhdG9yLWF3cy14cmF5L3NyYy9wbGF0Zm9ybS9ub2RlL0F3c1hyYXlJZEdlbmVyYXRvci50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3pvY29uZy9Eb2N1bWVudHMvZm9ya2VkL2F3cy1vcGVudGVsZW1ldHJ5LWpzL3BhY2thZ2VzL29wZW50ZWxlbWV0cnktaWQtZ2VuZXJhdG9yLWF3cy14cmF5L3NyYy9wbGF0Zm9ybS9ub2RlL0F3c1hyYXlJZEdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7OztBQUVILGlDQUFpQztBQUdqQyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFDeEIsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztBQUVyQjs7R0FFRztBQUNILE1BQWEsa0JBQWtCO0lBQzdCOzs7O09BSUc7SUFDSCxlQUFlO1FBQ2IsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFELE9BQU8sQ0FDTCxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEdBQUcsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUN6RSxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILGNBQWM7UUFDWixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDRjtBQXBCRCxnREFvQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IElkR2VuZXJhdG9yIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG5cbmNvbnN0IFNQQU5fSURfQllURVMgPSA4O1xuY29uc3QgVFJBQ0VfSURfQllURVMgPSAxNjtcbmNvbnN0IFRJTUVfQllURVMgPSA0O1xuXG4vKiogSWRHZW5lcmF0b3IgdGhhdCBnZW5lcmF0ZXMgdHJhY2UgSURzIGNvbmZvcm1pbmcgdG8gQVdTIFgtUmF5IGZvcm1hdC5cbiAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS94cmF5L2xhdGVzdC9kZXZndWlkZS94cmF5LWFwaS1zZW5kaW5nZGF0YS5odG1sI3hyYXktYXBpLXRyYWNlaWRzXG4gKi9cbmV4cG9ydCBjbGFzcyBBd3NYcmF5SWRHZW5lcmF0b3IgaW1wbGVtZW50cyBJZEdlbmVyYXRvciB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmFuZG9tIDE2LWJ5dGUgdHJhY2UgSUQgZm9ybWF0dGVkL2VuY29kZWQgYXMgYSAzMiBsb3dlcmNhc2UgaGV4XG4gICAqIGNoYXJhY3RlcnMgY29ycmVzcG9uZGluZyB0byAxMjggYml0cy4gVGhlIGZpcnN0IDQgYnl0ZXMgY29ycmVzcG9uZCB0byB0aGUgY3VycmVudFxuICAgKiB0aW1lLCBpbiBzZWNvbmRzLCBhcyBwZXIgWC1SYXkgdHJhY2UgSUQgZm9ybWF0LlxuICAgKi9cbiAgZ2VuZXJhdGVUcmFjZUlkKCk6IHN0cmluZyB7XG4gICAgY29uc3Qgbm93U2VjID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiAoXG4gICAgICBub3dTZWMgKyBjcnlwdG8ucmFuZG9tQnl0ZXMoVFJBQ0VfSURfQllURVMgLSBUSU1FX0JZVEVTKS50b1N0cmluZygnaGV4JylcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByYW5kb20gOC1ieXRlIHNwYW4gSUQgZm9ybWF0dGVkL2VuY29kZWQgYXMgYSAxNiBsb3dlcmNhc2UgaGV4XG4gICAqIGNoYXJhY3RlcnMgY29ycmVzcG9uZGluZyB0byA2NCBiaXRzLlxuICAgKi9cbiAgZ2VuZXJhdGVTcGFuSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKFNQQU5fSURfQllURVMpLnRvU3RyaW5nKCdoZXgnKTtcbiAgfVxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy96b2NvbmcvRG9jdW1lbnRzL2ZvcmtlZC9hd3Mtb3BlbnRlbGVtZXRyeS1qcy9wYWNrYWdlcy9vcGVudGVsZW1ldHJ5LWlkLWdlbmVyYXRvci1hd3MteHJheS9zcmMvcGxhdGZvcm0vbm9kZS9Bd3NYcmF5SWRHZW5lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6ImFBQUE7Ozs7Ozs7Ozs7Ozs7OzhxSUFjRztrT0FFSCxLQUFBLENBQUEsTUFBQSx5QkFBQSxPQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsQ0FHQSxLQUFNLENBQUEsYUFBYSx5QkFBRyxDQUFILENBQW5CLENBQ0EsS0FBTSxDQUFBLGNBQWMseUJBQUcsRUFBSCxDQUFwQixDQUNBLEtBQU0sQ0FBQSxVQUFVLHlCQUFHLENBQUgsQ0FBaEIsQ0FFQTs7R0FHQSxLQUFhLENBQUEsa0JBQWtCLENBQzdCOzs7O09BS0EsZUFBZSxFQUFBLHdCQUNiLEtBQU0sQ0FBQSxNQUFNLHlCQUFHLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBSSxDQUFDLEdBQUwsR0FBYSxJQUF4QixFQUE4QixRQUE5QixDQUF1QyxFQUF2QyxDQUFILENBQVosQ0FEYSx1QkFFYixNQUNFLENBQUEsTUFBTSxDQUFHLE1BQU0sQ0FBQyxXQUFQLENBQW1CLGNBQWMsQ0FBRyxVQUFwQyxFQUFnRCxRQUFoRCxDQUF5RCxLQUF6RCxDQURYLENBR0QsQ0FFRDs7O09BSUEsY0FBYyxFQUFBLCtDQUNaLE1BQU8sQ0FBQSxNQUFNLENBQUMsV0FBUCxDQUFtQixhQUFuQixFQUFrQyxRQUFsQyxDQUEyQyxLQUEzQyxDQUFQLENBQ0QsQ0FuQjRCLEMsdUJBQS9CLE9BQUEsQ0FBQSxrQkFBQSxDQUFBLGtCQUFBLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IElkR2VuZXJhdG9yIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG5cbmNvbnN0IFNQQU5fSURfQllURVMgPSA4O1xuY29uc3QgVFJBQ0VfSURfQllURVMgPSAxNjtcbmNvbnN0IFRJTUVfQllURVMgPSA0O1xuXG4vKiogSWRHZW5lcmF0b3IgdGhhdCBnZW5lcmF0ZXMgdHJhY2UgSURzIGNvbmZvcm1pbmcgdG8gQVdTIFgtUmF5IGZvcm1hdC5cbiAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS94cmF5L2xhdGVzdC9kZXZndWlkZS94cmF5LWFwaS1zZW5kaW5nZGF0YS5odG1sI3hyYXktYXBpLXRyYWNlaWRzXG4gKi9cbmV4cG9ydCBjbGFzcyBBd3NYcmF5SWRHZW5lcmF0b3IgaW1wbGVtZW50cyBJZEdlbmVyYXRvciB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmFuZG9tIDE2LWJ5dGUgdHJhY2UgSUQgZm9ybWF0dGVkL2VuY29kZWQgYXMgYSAzMiBsb3dlcmNhc2UgaGV4XG4gICAqIGNoYXJhY3RlcnMgY29ycmVzcG9uZGluZyB0byAxMjggYml0cy4gVGhlIGZpcnN0IDQgYnl0ZXMgY29ycmVzcG9uZCB0byB0aGUgY3VycmVudFxuICAgKiB0aW1lLCBpbiBzZWNvbmRzLCBhcyBwZXIgWC1SYXkgdHJhY2UgSUQgZm9ybWF0LlxuICAgKi9cbiAgZ2VuZXJhdGVUcmFjZUlkKCk6IHN0cmluZyB7XG4gICAgY29uc3Qgbm93U2VjID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiAoXG4gICAgICBub3dTZWMgKyBjcnlwdG8ucmFuZG9tQnl0ZXMoVFJBQ0VfSURfQllURVMgLSBUSU1FX0JZVEVTKS50b1N0cmluZygnaGV4JylcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByYW5kb20gOC1ieXRlIHNwYW4gSUQgZm9ybWF0dGVkL2VuY29kZWQgYXMgYSAxNiBsb3dlcmNhc2UgaGV4XG4gICAqIGNoYXJhY3RlcnMgY29ycmVzcG9uZGluZyB0byA2NCBiaXRzLlxuICAgKi9cbiAgZ2VuZXJhdGVTcGFuSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKFNQQU5fSURfQllURVMpLnRvU3RyaW5nKCdoZXgnKTtcbiAgfVxufVxuIl19