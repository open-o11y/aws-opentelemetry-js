{"version":3,"file":"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/AwsXrayIdGenerator.ts","sources":["/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/AwsXrayIdGenerator.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,iCAAiC;AAGjC,MAAM,aAAa,GAAG,CAAC,CAAC;AACxB,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,MAAM,UAAU,GAAG,CAAC,CAAC;AAErB;;GAEG;AACH,MAAa,kBAAkB;IAE7B;;;;OAIG;IACH,eAAe;QACb,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1D,OAAO,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,cAAc,GAAG,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClF,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;CACF;AAnBD,gDAmBC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as crypto from 'crypto';\nimport { IdGenerator } from '@opentelemetry/core';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\nconst TIME_BYTES = 4;\n\n/** IdGenerator that generates trace IDs conforming to AWS X-Ray format. \n * https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids\n */\nexport class AwsXrayIdGenerator implements IdGenerator {\n\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits. The first 4 bytes correspond to the current\n   * time, in seconds, as per X-Ray trace ID format.\n   */\n  generateTraceId(): string {\n    const nowSec = Math.floor(Date.now() / 1000).toString(16);\n    return nowSec + crypto.randomBytes(TRACE_ID_BYTES - TIME_BYTES).toString('hex');\n  }\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId(): string {\n    return crypto.randomBytes(SPAN_ID_BYTES).toString('hex');\n  }\n}\n"]}