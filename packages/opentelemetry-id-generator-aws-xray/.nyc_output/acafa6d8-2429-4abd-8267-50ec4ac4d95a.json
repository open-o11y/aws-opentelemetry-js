{"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/index.ts":{"path":"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/index.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":19},"end":{"line":11,"column":1}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":103}},"10":{"start":{"line":10,"column":21},"end":{"line":10,"column":103}},"11":{"start":{"line":10,"column":72},"end":{"line":10,"column":103}},"12":{"start":{"line":12,"column":0},"end":{"line":12,"column":62}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":41}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":50},"end":{"line":9,"column":51}},"loc":{"start":{"line":9,"column":71},"end":{"line":11,"column":1}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":19},"end":{"line":11,"column":1}},"type":"binary-expr","locations":[{"start":{"line":9,"column":20},"end":{"line":9,"column":24}},{"start":{"line":9,"column":28},"end":{"line":9,"column":45}},{"start":{"line":9,"column":50},"end":{"line":11,"column":1}}],"line":9},"5":{"loc":{"start":{"line":10,"column":21},"end":{"line":10,"column":103}},"type":"if","locations":[{"start":{"line":10,"column":21},"end":{"line":10,"column":103}},{"start":{"line":10,"column":21},"end":{"line":10,"column":103}}],"line":10},"6":{"loc":{"start":{"line":10,"column":25},"end":{"line":10,"column":70}},"type":"binary-expr","locations":[{"start":{"line":10,"column":25},"end":{"line":10,"column":40}},{"start":{"line":10,"column":44},"end":{"line":10,"column":70}}],"line":10}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1},"f":{"0":1,"1":1,"2":0,"3":1},"b":{"0":[1,1,1],"1":[1,0],"2":[1,0],"3":[0,0],"4":[1,1,1],"5":[1,0],"6":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/index.ts","sources":["/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;;;;GAcG;AACH,yCAAuB","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './node';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7fc712f6a61311368ad07d4ef6727cdf168b4ba7","contentHash":"058dbdf2491545e0cb18ef67e699933b8249a7c5b0c915151b1f2fd579566c02"},"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/index.ts":{"path":"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/index.ts","statementMap":{"0":{"start":{"line":17,"column":22},"end":{"line":23,"column":3}},"1":{"start":{"line":18,"column":4},"end":{"line":18,"column":33}},"2":{"start":{"line":18,"column":26},"end":{"line":18,"column":33}},"3":{"start":{"line":19,"column":4},"end":{"line":19,"column":89}},"4":{"start":{"line":19,"column":71},"end":{"line":19,"column":83}},"5":{"start":{"line":21,"column":4},"end":{"line":21,"column":33}},"6":{"start":{"line":21,"column":26},"end":{"line":21,"column":33}},"7":{"start":{"line":22,"column":4},"end":{"line":22,"column":17}},"8":{"start":{"line":24,"column":19},"end":{"line":26,"column":1}},"9":{"start":{"line":25,"column":4},"end":{"line":25,"column":103}},"10":{"start":{"line":25,"column":21},"end":{"line":25,"column":103}},"11":{"start":{"line":25,"column":72},"end":{"line":25,"column":103}},"12":{"start":{"line":27,"column":0},"end":{"line":27,"column":62}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":55}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":74},"end":{"line":17,"column":75}},"loc":{"start":{"line":17,"column":96},"end":{"line":20,"column":1}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":58},"end":{"line":19,"column":59}},"loc":{"start":{"line":19,"column":69},"end":{"line":19,"column":85}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":6},"end":{"line":20,"column":7}},"loc":{"start":{"line":20,"column":28},"end":{"line":23,"column":1}},"line":20},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":50},"end":{"line":24,"column":51}},"loc":{"start":{"line":24,"column":71},"end":{"line":26,"column":1}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":22},"end":{"line":23,"column":3}},"type":"binary-expr","locations":[{"start":{"line":17,"column":23},"end":{"line":17,"column":27}},{"start":{"line":17,"column":31},"end":{"line":17,"column":51}},{"start":{"line":17,"column":57},"end":{"line":23,"column":2}}],"line":17},"1":{"loc":{"start":{"line":17,"column":57},"end":{"line":23,"column":2}},"type":"cond-expr","locations":[{"start":{"line":17,"column":74},"end":{"line":20,"column":1}},{"start":{"line":20,"column":6},"end":{"line":23,"column":1}}],"line":17},"2":{"loc":{"start":{"line":18,"column":4},"end":{"line":18,"column":33}},"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":33}},{"start":{"line":18,"column":4},"end":{"line":18,"column":33}}],"line":18},"3":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":33}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":33}},{"start":{"line":21,"column":4},"end":{"line":21,"column":33}}],"line":21},"4":{"loc":{"start":{"line":24,"column":19},"end":{"line":26,"column":1}},"type":"binary-expr","locations":[{"start":{"line":24,"column":20},"end":{"line":24,"column":24}},{"start":{"line":24,"column":28},"end":{"line":24,"column":45}},{"start":{"line":24,"column":50},"end":{"line":26,"column":1}}],"line":24},"5":{"loc":{"start":{"line":25,"column":21},"end":{"line":25,"column":103}},"type":"if","locations":[{"start":{"line":25,"column":21},"end":{"line":25,"column":103}},{"start":{"line":25,"column":21},"end":{"line":25,"column":103}}],"line":25},"6":{"loc":{"start":{"line":25,"column":25},"end":{"line":25,"column":70}},"type":"binary-expr","locations":[{"start":{"line":25,"column":25},"end":{"line":25,"column":40}},{"start":{"line":25,"column":44},"end":{"line":25,"column":70}}],"line":25}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1},"f":{"0":1,"1":1,"2":0,"3":1},"b":{"0":[1,1,1],"1":[1,0],"2":[1,0],"3":[0,0],"4":[1,1,1],"5":[1,0],"6":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/index.ts","sources":["/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;AAEH,uDAAqC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './AwsXrayIdGenerator';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6c24eb02ff9555a0c38582b81b632a60f0d05052","contentHash":"1631a310fa4b00e64e9a4ee11dd9b04afe0e58bde32931feb9f39a3f3b09b89c"},"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/AwsXrayIdGenerator.ts":{"path":"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/AwsXrayIdGenerator.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":36}},"2":{"start":{"line":19,"column":15},"end":{"line":19,"column":32}},"3":{"start":{"line":20,"column":22},"end":{"line":20,"column":23}},"4":{"start":{"line":21,"column":23},"end":{"line":21,"column":25}},"5":{"start":{"line":22,"column":19},"end":{"line":22,"column":20}},"6":{"start":{"line":33,"column":23},"end":{"line":33,"column":65}},"7":{"start":{"line":34,"column":8},"end":{"line":34,"column":90}},"8":{"start":{"line":41,"column":8},"end":{"line":41,"column":65}},"9":{"start":{"line":44,"column":0},"end":{"line":44,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":22},"end":{"line":35,"column":5}},"line":32},"1":{"name":"(anonymous_1)","decl":{"start":{"line":40,"column":4},"end":{"line":40,"column":5}},"loc":{"start":{"line":40,"column":21},"end":{"line":42,"column":5}},"line":40}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":6,"7":6,"8":4,"9":1},"f":{"0":6,"1":4},"b":{},"inputSourceMap":{"version":3,"file":"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/AwsXrayIdGenerator.ts","sources":["/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-id-generator-aws-xray/src/platform/node/AwsXrayIdGenerator.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,iCAAiC;AAGjC,MAAM,aAAa,GAAG,CAAC,CAAC;AACxB,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,MAAM,UAAU,GAAG,CAAC,CAAC;AAErB;;GAEG;AACH,MAAa,kBAAkB;IAC7B;;;;OAIG;IACH,eAAe;QACb,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1D,OAAO,CACL,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,cAAc,GAAG,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CACzE,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;CACF;AApBD,gDAoBC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as crypto from 'crypto';\nimport { IdGenerator } from '@opentelemetry/core';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\nconst TIME_BYTES = 4;\n\n/** IdGenerator that generates trace IDs conforming to AWS X-Ray format.\n * https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids\n */\nexport class AwsXrayIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits. The first 4 bytes correspond to the current\n   * time, in seconds, as per X-Ray trace ID format.\n   */\n  generateTraceId(): string {\n    const nowSec = Math.floor(Date.now() / 1000).toString(16);\n    return (\n      nowSec + crypto.randomBytes(TRACE_ID_BYTES - TIME_BYTES).toString('hex')\n    );\n  }\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId(): string {\n    return crypto.randomBytes(SPAN_ID_BYTES).toString('hex');\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"64d2e6cfd99e1237ee4528730d4e96669ea77604","contentHash":"0493edfed07af257d62cf4652d266aade3692bc9a8225f5abf12f877e8c23c43"}}