{"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-propagator-aws-xray/src/AWSXRayPropagator.ts":{"path":"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-propagator-aws-xray/src/AWSXRayPropagator.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":69}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":43}},"3":{"start":{"line":20,"column":15},"end":{"line":20,"column":45}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":52}},"5":{"start":{"line":22,"column":31},"end":{"line":22,"column":34}},"6":{"start":{"line":23,"column":21},"end":{"line":23,"column":24}},"7":{"start":{"line":24,"column":21},"end":{"line":24,"column":27}},"8":{"start":{"line":25,"column":24},"end":{"line":25,"column":26}},"9":{"start":{"line":26,"column":25},"end":{"line":26,"column":28}},"10":{"start":{"line":27,"column":27},"end":{"line":27,"column":30}},"11":{"start":{"line":28,"column":35},"end":{"line":28,"column":36}},"12":{"start":{"line":29,"column":35},"end":{"line":29,"column":37}},"13":{"start":{"line":30,"column":35},"end":{"line":30,"column":36}},"14":{"start":{"line":31,"column":22},"end":{"line":31,"column":30}},"15":{"start":{"line":32,"column":25},"end":{"line":32,"column":34}},"16":{"start":{"line":33,"column":28},"end":{"line":33,"column":29}},"17":{"start":{"line":34,"column":19},"end":{"line":34,"column":22}},"18":{"start":{"line":35,"column":20},"end":{"line":35,"column":23}},"19":{"start":{"line":36,"column":28},"end":{"line":36,"column":47}},"20":{"start":{"line":37,"column":27},"end":{"line":37,"column":44}},"21":{"start":{"line":48,"column":28},"end":{"line":48,"column":64}},"22":{"start":{"line":49,"column":8},"end":{"line":50,"column":19}},"23":{"start":{"line":50,"column":12},"end":{"line":50,"column":19}},"24":{"start":{"line":51,"column":26},"end":{"line":51,"column":45}},"25":{"start":{"line":52,"column":28},"end":{"line":56,"column":59}},"26":{"start":{"line":57,"column":25},"end":{"line":57,"column":43}},"27":{"start":{"line":58,"column":29},"end":{"line":58,"column":78}},"28":{"start":{"line":60,"column":28},"end":{"line":70,"column":24}},"29":{"start":{"line":71,"column":8},"end":{"line":71,"column":70}},"30":{"start":{"line":74,"column":28},"end":{"line":74,"column":74}},"31":{"start":{"line":75,"column":8},"end":{"line":76,"column":27}},"32":{"start":{"line":76,"column":12},"end":{"line":76,"column":27}},"33":{"start":{"line":77,"column":8},"end":{"line":77,"column":68}},"34":{"start":{"line":80,"column":28},"end":{"line":80,"column":76}},"35":{"start":{"line":82,"column":8},"end":{"line":83,"column":47}},"36":{"start":{"line":83,"column":12},"end":{"line":83,"column":47}},"37":{"start":{"line":84,"column":18},"end":{"line":84,"column":19}},"38":{"start":{"line":86,"column":28},"end":{"line":86,"column":50}},"39":{"start":{"line":87,"column":27},"end":{"line":87,"column":48}},"40":{"start":{"line":88,"column":31},"end":{"line":88,"column":35}},"41":{"start":{"line":89,"column":8},"end":{"line":111,"column":9}},"42":{"start":{"line":90,"column":35},"end":{"line":90,"column":83}},"43":{"start":{"line":91,"column":12},"end":{"line":99,"column":13}},"44":{"start":{"line":92,"column":16},"end":{"line":92,"column":80}},"45":{"start":{"line":93,"column":16},"end":{"line":93,"column":41}},"46":{"start":{"line":97,"column":16},"end":{"line":97,"column":64}},"47":{"start":{"line":98,"column":16},"end":{"line":98,"column":41}},"48":{"start":{"line":100,"column":32},"end":{"line":100,"column":65}},"49":{"start":{"line":101,"column":26},"end":{"line":101,"column":64}},"50":{"start":{"line":102,"column":12},"end":{"line":104,"column":13}},"51":{"start":{"line":103,"column":16},"end":{"line":103,"column":58}},"52":{"start":{"line":105,"column":12},"end":{"line":107,"column":13}},"53":{"start":{"line":106,"column":16},"end":{"line":106,"column":56}},"54":{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},"55":{"start":{"line":109,"column":16},"end":{"line":109,"column":63}},"56":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"57":{"start":{"line":113,"column":12},"end":{"line":113,"column":47}},"58":{"start":{"line":115,"column":34},"end":{"line":120,"column":9}},"59":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"60":{"start":{"line":122,"column":12},"end":{"line":122,"column":47}},"61":{"start":{"line":124,"column":8},"end":{"line":124,"column":33}},"62":{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},"63":{"start":{"line":129,"column":12},"end":{"line":129,"column":42}},"64":{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},"65":{"start":{"line":133,"column":12},"end":{"line":133,"column":42}},"66":{"start":{"line":136,"column":8},"end":{"line":139,"column":9}},"67":{"start":{"line":138,"column":12},"end":{"line":138,"column":42}},"68":{"start":{"line":140,"column":26},"end":{"line":140,"column":107}},"69":{"start":{"line":141,"column":27},"end":{"line":141,"column":97}},"70":{"start":{"line":142,"column":27},"end":{"line":142,"column":49}},"71":{"start":{"line":144,"column":8},"end":{"line":146,"column":9}},"72":{"start":{"line":145,"column":12},"end":{"line":145,"column":42}},"73":{"start":{"line":147,"column":8},"end":{"line":147,"column":26}},"74":{"start":{"line":150,"column":8},"end":{"line":152,"column":36}},"75":{"start":{"line":155,"column":8},"end":{"line":158,"column":9}},"76":{"start":{"line":157,"column":12},"end":{"line":157,"column":41}},"77":{"start":{"line":159,"column":8},"end":{"line":161,"column":9}},"78":{"start":{"line":160,"column":12},"end":{"line":160,"column":44}},"79":{"start":{"line":162,"column":8},"end":{"line":162,"column":20}},"80":{"start":{"line":165,"column":0},"end":{"line":165,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":47,"column":4},"end":{"line":47,"column":5}},"loc":{"start":{"line":47,"column":37},"end":{"line":72,"column":5}},"line":47},"1":{"name":"(anonymous_1)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":38},"end":{"line":78,"column":5}},"line":73},"2":{"name":"(anonymous_2)","decl":{"start":{"line":79,"column":4},"end":{"line":79,"column":5}},"loc":{"start":{"line":79,"column":46},"end":{"line":125,"column":5}},"line":79},"3":{"name":"(anonymous_3)","decl":{"start":{"line":126,"column":4},"end":{"line":126,"column":5}},"loc":{"start":{"line":126,"column":31},"end":{"line":148,"column":5}},"line":126},"4":{"name":"(anonymous_4)","decl":{"start":{"line":149,"column":4},"end":{"line":149,"column":5}},"loc":{"start":{"line":149,"column":31},"end":{"line":153,"column":5}},"line":149},"5":{"name":"(anonymous_5)","decl":{"start":{"line":154,"column":4},"end":{"line":154,"column":5}},"loc":{"start":{"line":154,"column":37},"end":{"line":163,"column":5}},"line":154}},"branchMap":{"0":{"loc":{"start":{"line":49,"column":8},"end":{"line":50,"column":19}},"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":50,"column":19}},{"start":{"line":49,"column":8},"end":{"line":50,"column":19}}],"line":49},"1":{"loc":{"start":{"line":49,"column":12},"end":{"line":49,"column":56}},"type":"binary-expr","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":24}},{"start":{"line":49,"column":28},"end":{"line":49,"column":56}}],"line":49},"2":{"loc":{"start":{"line":58,"column":29},"end":{"line":58,"column":78}},"type":"cond-expr","locations":[{"start":{"line":58,"column":54},"end":{"line":58,"column":64}},{"start":{"line":58,"column":67},"end":{"line":58,"column":78}}],"line":58},"3":{"loc":{"start":{"line":75,"column":8},"end":{"line":76,"column":27}},"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":76,"column":27}},{"start":{"line":75,"column":8},"end":{"line":76,"column":27}}],"line":75},"4":{"loc":{"start":{"line":82,"column":8},"end":{"line":83,"column":47}},"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":83,"column":47}},{"start":{"line":82,"column":8},"end":{"line":83,"column":47}}],"line":82},"5":{"loc":{"start":{"line":82,"column":12},"end":{"line":82,"column":59}},"type":"binary-expr","locations":[{"start":{"line":82,"column":12},"end":{"line":82,"column":24}},{"start":{"line":82,"column":28},"end":{"line":82,"column":59}}],"line":82},"6":{"loc":{"start":{"line":91,"column":12},"end":{"line":99,"column":13}},"type":"if","locations":[{"start":{"line":91,"column":12},"end":{"line":99,"column":13}},{"start":{"line":91,"column":12},"end":{"line":99,"column":13}}],"line":91},"7":{"loc":{"start":{"line":102,"column":12},"end":{"line":104,"column":13}},"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":104,"column":13}},{"start":{"line":102,"column":12},"end":{"line":104,"column":13}}],"line":102},"8":{"loc":{"start":{"line":105,"column":12},"end":{"line":107,"column":13}},"type":"if","locations":[{"start":{"line":105,"column":12},"end":{"line":107,"column":13}},{"start":{"line":105,"column":12},"end":{"line":107,"column":13}}],"line":105},"9":{"loc":{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},{"start":{"line":108,"column":12},"end":{"line":110,"column":13}}],"line":108},"10":{"loc":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"type":"if","locations":[{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},{"start":{"line":112,"column":8},"end":{"line":114,"column":9}}],"line":112},"11":{"loc":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},{"start":{"line":121,"column":8},"end":{"line":123,"column":9}}],"line":121},"12":{"loc":{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},"type":"if","locations":[{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},{"start":{"line":128,"column":8},"end":{"line":130,"column":9}}],"line":128},"13":{"loc":{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},"type":"if","locations":[{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},{"start":{"line":132,"column":8},"end":{"line":134,"column":9}}],"line":132},"14":{"loc":{"start":{"line":136,"column":8},"end":{"line":139,"column":9}},"type":"if","locations":[{"start":{"line":136,"column":8},"end":{"line":139,"column":9}},{"start":{"line":136,"column":8},"end":{"line":139,"column":9}}],"line":136},"15":{"loc":{"start":{"line":136,"column":12},"end":{"line":137,"column":81}},"type":"binary-expr","locations":[{"start":{"line":136,"column":12},"end":{"line":136,"column":81}},{"start":{"line":137,"column":12},"end":{"line":137,"column":81}}],"line":136},"16":{"loc":{"start":{"line":144,"column":8},"end":{"line":146,"column":9}},"type":"if","locations":[{"start":{"line":144,"column":8},"end":{"line":146,"column":9}},{"start":{"line":144,"column":8},"end":{"line":146,"column":9}}],"line":144},"17":{"loc":{"start":{"line":150,"column":15},"end":{"line":152,"column":35}},"type":"cond-expr","locations":[{"start":{"line":151,"column":14},"end":{"line":151,"column":26}},{"start":{"line":152,"column":14},"end":{"line":152,"column":35}}],"line":150},"18":{"loc":{"start":{"line":155,"column":8},"end":{"line":158,"column":9}},"type":"if","locations":[{"start":{"line":155,"column":8},"end":{"line":158,"column":9}},{"start":{"line":155,"column":8},"end":{"line":158,"column":9}}],"line":155},"19":{"loc":{"start":{"line":155,"column":12},"end":{"line":156,"column":43}},"type":"binary-expr","locations":[{"start":{"line":155,"column":12},"end":{"line":155,"column":58}},{"start":{"line":156,"column":12},"end":{"line":156,"column":43}}],"line":155},"20":{"loc":{"start":{"line":159,"column":8},"end":{"line":161,"column":9}},"type":"if","locations":[{"start":{"line":159,"column":8},"end":{"line":161,"column":9}},{"start":{"line":159,"column":8},"end":{"line":161,"column":9}}],"line":159}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":5,"22":5,"23":2,"24":3,"25":3,"26":3,"27":3,"28":3,"29":3,"30":14,"31":14,"32":11,"33":3,"34":14,"35":14,"36":2,"37":12,"38":12,"39":12,"40":12,"41":12,"42":38,"43":38,"44":26,"45":26,"46":12,"47":12,"48":38,"49":38,"50":38,"51":12,"52":38,"53":12,"54":38,"55":12,"56":12,"57":3,"58":9,"59":9,"60":6,"61":3,"62":12,"63":1,"64":11,"65":1,"66":10,"67":1,"68":9,"69":9,"70":9,"71":9,"72":1,"73":8,"74":12,"75":12,"76":4,"77":8,"78":5,"79":3,"80":1},"f":{"0":5,"1":14,"2":14,"3":12,"4":12,"5":12},"b":{"0":[2,3],"1":[5,4],"2":[2,1],"3":[11,3],"4":[2,12],"5":[14,12],"6":[26,12],"7":[12,26],"8":[12,26],"9":[12,26],"10":[3,9],"11":[6,3],"12":[1,11],"13":[1,10],"14":[1,9],"15":[10,9],"16":[1,8],"17":[10,2],"18":[4,8],"19":[12,10],"20":[5,3]},"inputSourceMap":{"version":3,"file":"/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-propagator-aws-xray/src/AWSXRayPropagator.ts","sources":["/Users/zocong/Documents/forked/aws-opentelemetry-js/packages/opentelemetry-propagator-aws-xray/src/AWSXRayPropagator.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  HttpTextPropagator,\n  SpanContext,\n  TraceFlags,\n  SetterFunction,\n  GetterFunction,\n  INVALID_TRACE_ID,\n  INVALID_SPAN_ID,\n} from '@opentelemetry/api';\nimport {\n  getParentSpanContext,\n  setExtractedSpanContext,\n  INVALID_SPAN_CONTEXT,\n  isValid,\n} from '@opentelemetry/core';\n\nexport const AWSXRAY_TRACE_ID_HEADER = 'X-Amzn-Trace-Id';\n\nconst TRACE_HEADER_DELIMITER = ';';\nconst KV_DELIMITER = '=';\n\nconst TRACE_ID_KEY = 'Root';\nconst TRACE_ID_LENGTH = 35;\nconst TRACE_ID_VERSION = '1';\nconst TRACE_ID_DELIMITER = '-';\nconst TRACE_ID_DELIMITER_INDEX_1 = 1;\nconst TRACE_ID_DELIMITER_INDEX_2 = 10;\nconst TRACE_ID_FIRST_PART_LENGTH = 8;\n\nconst PARENT_ID_KEY = 'Parent';\n\nconst SAMPLED_FLAG_KEY = 'Sampled';\nconst SAMPLED_FLAG_LENGTH = 1;\nconst IS_SAMPLED = '1';\nconst NOT_SAMPLED = '0';\n\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n/**\n * Implementation of the AWS X-Ray Trace Header propagation protocol. See <a href=\n * https://https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader>AWS\n * Tracing header spec</a>\n *\n * An example AWS Xray Tracing Header is shown below:\n * X-Amzn-Trace-Id: Root=1-5759e988-bd862e3fe1be46a994272793;Parent=53995c3f42cd8ad8;Sampled=1\n */\nexport class AWSXRayPropagator implements HttpTextPropagator {\n  inject(context: Context, carrier: unknown, setter: SetterFunction) {\n    const spanContext = getParentSpanContext(context);\n    if (!spanContext || !isValid(spanContext)) return;\n\n    const otTraceId = spanContext.traceId;\n    const xrayTraceId =\n      TRACE_ID_VERSION +\n      TRACE_ID_DELIMITER +\n      otTraceId.substring(0, TRACE_ID_FIRST_PART_LENGTH) +\n      TRACE_ID_DELIMITER +\n      otTraceId.substring(TRACE_ID_FIRST_PART_LENGTH);\n    const parentId = spanContext.spanId;\n    const samplingFlag = spanContext.traceFlags ? IS_SAMPLED : NOT_SAMPLED;\n    // TODO: Add OT trace state to the X-Ray trace header\n\n    const traceHeader =\n      TRACE_ID_KEY +\n      KV_DELIMITER +\n      xrayTraceId +\n      TRACE_HEADER_DELIMITER +\n      PARENT_ID_KEY +\n      KV_DELIMITER +\n      parentId +\n      TRACE_HEADER_DELIMITER +\n      SAMPLED_FLAG_KEY +\n      KV_DELIMITER +\n      samplingFlag;\n\n    setter(carrier, AWSXRAY_TRACE_ID_HEADER, traceHeader);\n  }\n\n  extract(context: Context, carrier: unknown, getter: GetterFunction): Context {\n    const spanContext = this.getSpanContextFromHeader(carrier, getter);\n    if (!isValid(spanContext)) return context;\n\n    return setExtractedSpanContext(context, spanContext);\n  }\n\n  private getSpanContextFromHeader(\n    carrier: unknown,\n    getter: GetterFunction\n  ): SpanContext {\n    const traceHeader = getter(carrier, AWSXRAY_TRACE_ID_HEADER);\n    // Only if the returned traceHeader is no empty string can be extracted\n    if (!traceHeader || typeof traceHeader !== 'string')\n      return INVALID_SPAN_CONTEXT;\n\n    let pos = 0;\n    let trimmedPart: string;\n    let parsedTraceId = INVALID_TRACE_ID;\n    let parsedSpanId = INVALID_SPAN_ID;\n    let parsedTraceFlags = null;\n    while (pos < traceHeader.length) {\n      const delimiterIndex = traceHeader.indexOf(TRACE_HEADER_DELIMITER, pos);\n      if (delimiterIndex >= 0) {\n        trimmedPart = traceHeader.substring(pos, delimiterIndex).trim();\n        pos = delimiterIndex + 1;\n      } else {\n        //last part\n        trimmedPart = traceHeader.substring(pos).trim();\n        pos = traceHeader.length;\n      }\n      const equalsIndex = trimmedPart.indexOf(KV_DELIMITER);\n\n      const value = trimmedPart.substring(equalsIndex + 1);\n\n      if (trimmedPart.startsWith(TRACE_ID_KEY)) {\n        parsedTraceId = this._parseTraceId(value);\n      }\n      if (trimmedPart.startsWith(PARENT_ID_KEY)) {\n        parsedSpanId = this._parseSpanId(value);\n      }\n      if (trimmedPart.startsWith(SAMPLED_FLAG_KEY)) {\n        parsedTraceFlags = this._parseTraceFlag(value);\n      }\n    }\n    if (parsedTraceFlags === null) {\n      return INVALID_SPAN_CONTEXT;\n    }\n    const resultSpanContext: SpanContext = {\n      traceId: parsedTraceId,\n      spanId: parsedSpanId,\n      traceFlags: parsedTraceFlags,\n      isRemote: true,\n    };\n    if (!isValid(resultSpanContext)) {\n      return INVALID_SPAN_CONTEXT;\n    }\n    return resultSpanContext;\n  }\n\n  private _parseTraceId(xrayTraceId: string): string {\n    // Check length of trace id\n    if (xrayTraceId.length !== TRACE_ID_LENGTH) {\n      return INVALID_TRACE_ID;\n    }\n\n    // Check version trace id version\n    if (!xrayTraceId.startsWith(TRACE_ID_VERSION)) {\n      return INVALID_TRACE_ID;\n    }\n\n    // Check delimiters\n    if (\n      xrayTraceId.charAt(TRACE_ID_DELIMITER_INDEX_1) !== TRACE_ID_DELIMITER ||\n      xrayTraceId.charAt(TRACE_ID_DELIMITER_INDEX_2) !== TRACE_ID_DELIMITER\n    ) {\n      return INVALID_TRACE_ID;\n    }\n\n    const epochPart = xrayTraceId.substring(\n      TRACE_ID_DELIMITER_INDEX_1 + 1,\n      TRACE_ID_DELIMITER_INDEX_2\n    );\n    const uniquePart = xrayTraceId.substring(\n      TRACE_ID_DELIMITER_INDEX_2 + 1,\n      TRACE_ID_LENGTH\n    );\n    const resTraceId = epochPart + uniquePart;\n\n    // Check the content of trace id\n    if (!VALID_TRACEID_REGEX.test(resTraceId)) {\n      return INVALID_TRACE_ID;\n    }\n\n    return resTraceId;\n  }\n\n  private _parseSpanId(xrayParentId: string): string {\n    return VALID_SPANID_REGEX.test(xrayParentId)\n      ? xrayParentId\n      : INVALID_SPAN_ID;\n  }\n\n  private _parseTraceFlag(xraySampledFlag: string): TraceFlags | null {\n    if (\n      xraySampledFlag.length === SAMPLED_FLAG_LENGTH &&\n      xraySampledFlag === NOT_SAMPLED\n    ) {\n      return TraceFlags.NONE;\n    }\n    if (xraySampledFlag === IS_SAMPLED) {\n      return TraceFlags.SAMPLED;\n    }\n    return null;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0ef2b243e9e1be75ee8f9b3e6bbc125275380067","contentHash":"a4441969d366214c80485ee35ffca44848b881cf5d21e5c109bff84e98810877"}}