{"version":3,"file":"/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts","sources":["/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  defaultGetter,\n  defaultSetter,\n  SpanContext,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport {\n  getExtractedSpanContext,\n  setExtractedSpanContext,\n  TraceState,\n} from '@opentelemetry/core';\nimport * as assert from 'assert';\nimport {\n  AWSXRayPropagator,\n  AWSXRAY_TRACE_ID_HEADER,\n} from '../src/AWSXRayPropagator';\n\ndescribe('AWSXRayPropagator', () => {\n  const xrayPropagator = new AWSXRayPropagator();\n  const TRACE_ID = \"8a3c60f7d188f8fa79d48a391a778fa6\";\n  const SPAN_ID = \"53995c3f42cd8ad8\";\n  const SAMPLED_TRACE_FLAG = TraceFlags.SAMPLED;\n  const NOT_SAMPLED_TRACE_FLAG = TraceFlags.NONE;\n\n  let carrier: { [key: string]: unknown };\n\n  beforeEach(() => {\n    carrier = {};\n  });\n\n  describe('.inject()', () => {\n    it('inject sampled context', () => {\n      const spanContext: SpanContext = {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        traceFlags: SAMPLED_TRACE_FLAG,\n      }\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n\n      assert.deepStrictEqual(\n        carrier[AWSXRAY_TRACE_ID_HEADER],\n        \"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1\"\n      )\n    });\n\n    it('inject not sampled context', () => {\n      const spanContext: SpanContext = {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        traceFlags: NOT_SAMPLED_TRACE_FLAG,\n      }\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n\n      assert.deepStrictEqual(\n        carrier[AWSXRAY_TRACE_ID_HEADER],\n        \"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=0\"\n      )\n    });\n\n    it (\"inject with TraceState\", () => {\n      const traceState = new TraceState();\n      traceState.set(\"foo\",\"bar\");\n      const spanContext: SpanContext = {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        traceFlags: SAMPLED_TRACE_FLAG,\n        traceState: traceState,\n      }\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n\n      // TODO: assert trace state when the propagator supports it\n      assert.deepStrictEqual(\n        carrier[AWSXRAY_TRACE_ID_HEADER],\n        \"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1\"\n      )\n    });\n  });\n\n  describe('.extract()', () => {\n    it('extract nothing from context', () => {\n      // context remains untouched\n      assert.deepStrictEqual(xrayPropagator.extract(\n        Context.ROOT_CONTEXT,\n        carrier,\n        defaultGetter\n        ), Context.ROOT_CONTEXT);\n    });\n\n    it('extract sampled context', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, {\n          traceId: TRACE_ID,\n          spanId: SPAN_ID,\n          isRemote: true,\n          traceFlags: TraceFlags.SAMPLED,\n        });\n    });\n\n    it('extract sampled context with arbitrary order', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Parent=53995c3f42cd8ad8;Sampled=1;Root=1-8a3c60f7-d188f8fa79d48a391a778fa6';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, {\n          traceId: TRACE_ID,\n          spanId: SPAN_ID,\n          isRemote: true,\n          traceFlags: TraceFlags.SAMPLED,\n        });\n    });\n\n    it('extract context with additional fields', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1;Foo=Bar';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      // TODO: assert additional fields when the propagator supports it\n      assert.deepStrictEqual(extractedSpanContext, {\n          traceId: TRACE_ID,\n          spanId: SPAN_ID,\n          isRemote: true,\n          traceFlags: TraceFlags.SAMPLED,\n        });\n    });\n\n    it('extract empty header value', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = '';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid traceId', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=1-abcdefgh-ijklmnopabcdefghijklmnop;Parent=53995c3f42cd8ad8;Sampled=0';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid traceId size', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa600;Parent=53995c3f42cd8ad8;Sampled=0';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid spanId', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=abcdefghijklmnop;Sampled=0';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid spanId size', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad800;Sampled=0';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid traceFlags', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid traceFlags length', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=10220';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract nonnumeric invalid traceFlags', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=a';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid aws xray version', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=2-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n  });\n});\n"]}