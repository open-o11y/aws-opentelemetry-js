{"version":3,"file":"/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/src/AWSXRayPropagator.ts","sources":["/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/src/AWSXRayPropagator.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  HttpTextPropagator,\n  SpanContext,\n  TraceFlags,\n  SetterFunction,\n  GetterFunction,\n  INVALID_TRACE_ID,\n  INVALID_SPAN_ID,\n} from '@opentelemetry/api';\nimport {\n  getParentSpanContext,\n  setExtractedSpanContext,\n  INVALID_SPAN_CONTEXT,\n  isValid,\n} from '@opentelemetry/core';\n\nexport const AWSXRAY_TRACE_ID_HEADER = 'X-Amzn-Trace-Id';\n\nconst TRACE_HEADER_DELIMITER = ';';\nconst KV_DELIMITER = '=';\n\nconst TRACE_ID_KEY = 'Root';\nconst TRACE_ID_LENGTH = 35;\nconst TRACE_ID_VERSION = \"1\";\nconst TRACE_ID_DELIMITER = '-';\nconst TRACE_ID_DELIMITER_INDEX_1 = 1;\nconst TRACE_ID_DELIMITER_INDEX_2 = 10;\nconst TRACE_ID_FIRST_PART_LENGTH = 8;\n\nconst PARENT_ID_KEY = 'Parent';\nconst PARENT_ID_LENGTH = 16;\n\nconst SAMPLED_FLAG_KEY = 'Sampled';\nconst SAMPLED_FLAG_LENGTH = 1;\nconst IS_SAMPLED = '1';\nconst NOT_SAMPLED = '0';\n\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n/**\n * Implementation of the AWS X-Ray Trace Header propagation protocol. See <a href=\n * https://https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader>AWS\n * Tracing header spec</a>\n * \n * An example AWS Xray Tracing Header is shown below:\n * X-Amzn-Trace-Id: Root=1-5759e988-bd862e3fe1be46a994272793;Parent=53995c3f42cd8ad8;Sampled=1\n */\nexport class AWSXRayPropagator implements HttpTextPropagator {\n  inject(context: Context, carrier: unknown, setter: SetterFunction) {\n    const spanContext = getParentSpanContext(context);\n    if (!spanContext) return;\n    if (!VALID_TRACEID_REGEX.test(spanContext.traceId) ||\n      !VALID_SPANID_REGEX.test(spanContext.spanId) ||\n      (spanContext.traceFlags !== TraceFlags.NONE &&\n        spanContext.traceFlags !== TraceFlags.SAMPLED)) return;\n\n    const otTraceId = spanContext.traceId;\n    const xrayTraceId = TRACE_ID_VERSION\n      + TRACE_ID_DELIMITER\n      + otTraceId.substring(0, TRACE_ID_FIRST_PART_LENGTH)\n      + TRACE_ID_DELIMITER\n      + otTraceId.substring(TRACE_ID_FIRST_PART_LENGTH);\n    const parentId = spanContext.spanId;\n    const samplingFlag = spanContext.traceFlags? IS_SAMPLED: NOT_SAMPLED;\n    // TODO: Add OT trace state to the X-Ray trace header\n\n    const traceHeader = TRACE_ID_KEY\n      + KV_DELIMITER\n      + xrayTraceId\n      + TRACE_HEADER_DELIMITER\n      + PARENT_ID_KEY\n      + KV_DELIMITER\n      + parentId\n      + TRACE_HEADER_DELIMITER\n      + SAMPLED_FLAG_KEY\n      + KV_DELIMITER\n      + samplingFlag;\n\n    setter(\n      carrier,\n      AWSXRAY_TRACE_ID_HEADER,\n      traceHeader\n    );\n  }\n\n  extract(context: Context, carrier: unknown, getter: GetterFunction): Context {\n    const spanContext = this.getSpanContextFromHeader(carrier, getter);\n    if (!isValid(spanContext)) return context;\n\n    return setExtractedSpanContext(context, spanContext);\n  }\n  \n  private getSpanContextFromHeader(carrier: unknown, getter: GetterFunction): SpanContext {\n    const traceHeader = getter(carrier, AWSXRAY_TRACE_ID_HEADER);\n    // Only if the returned traceHeader is no empty string can be extracted\n    if (!traceHeader || typeof traceHeader !== 'string') return INVALID_SPAN_CONTEXT;\n\n    let pos = 0, trimmedPart: string;\n    let parsedTraceId = INVALID_TRACE_ID;\n    let parsedSpanId = INVALID_SPAN_ID;\n    let parsedTraceFlags = null;\n    while(pos < traceHeader.length) {\n      const delimiterIndex = traceHeader.indexOf(TRACE_HEADER_DELIMITER, pos);\n      if (delimiterIndex >= 0) {\n        trimmedPart = traceHeader.substring(pos, delimiterIndex).trim();\n        pos = delimiterIndex + 1;\n      } else {\n        //last part\n        trimmedPart = traceHeader.substring(pos).trim();\n        pos = traceHeader.length;\n      }\n      const equalsIndex = trimmedPart.indexOf(KV_DELIMITER);\n\n      const value = trimmedPart.substring(equalsIndex + 1);\n\n      if (trimmedPart.startsWith(TRACE_ID_KEY)) {\n        parsedTraceId = this._parseTraceId(value);\n      }\n      if (trimmedPart.startsWith(PARENT_ID_KEY)) {\n        parsedSpanId = this._parseSpanId(value);\n      }\n      if (trimmedPart.startsWith(SAMPLED_FLAG_KEY)) {\n        parsedTraceFlags = this._parseTraceFlag(value);\n      }\n    }\n    if (parsedTraceFlags === null) {\n      return INVALID_SPAN_CONTEXT;\n    }\n    const resultSpanContext: SpanContext = {\n      traceId: parsedTraceId,\n      spanId: parsedSpanId,\n      traceFlags: parsedTraceFlags,\n      isRemote: true,\n    }\n    if (!isValid(resultSpanContext)) {\n      return INVALID_SPAN_CONTEXT;\n    }\n    return resultSpanContext;\n  }\n\n  private _parseTraceId(xrayTraceId: string): string {\n    // Check length of trace id\n    if (xrayTraceId.length !== TRACE_ID_LENGTH) {\n      return INVALID_TRACE_ID;\n    }\n\n    // Check version trace id version\n    if (!xrayTraceId.startsWith(TRACE_ID_VERSION)) {\n      return INVALID_TRACE_ID;\n    }\n\n    // Check delimiters\n    if (xrayTraceId.charAt(TRACE_ID_DELIMITER_INDEX_1) !== TRACE_ID_DELIMITER\n    || xrayTraceId.charAt(TRACE_ID_DELIMITER_INDEX_2) !== TRACE_ID_DELIMITER) {\n      return INVALID_TRACE_ID;\n    }\n\n    const epochPart = xrayTraceId.substring(TRACE_ID_DELIMITER_INDEX_1 + 1, TRACE_ID_DELIMITER_INDEX_2);\n    const uniquePart = xrayTraceId.substring(TRACE_ID_DELIMITER_INDEX_2 + 1, TRACE_ID_LENGTH);\n    const resTraceId = epochPart + uniquePart;\n\n    // Check the content of trace id\n    if (!VALID_TRACEID_REGEX.test(resTraceId)) {\n      return INVALID_TRACE_ID\n    }\n\n    return resTraceId;\n  }\n\n  private _parseSpanId(xrayParentId: string): string{\n    return (VALID_SPANID_REGEX.test(xrayParentId))? xrayParentId: INVALID_SPAN_ID;\n  }\n\n  private _parseTraceFlag(xraySampledFlag: string): TraceFlags | null {\n    if (xraySampledFlag.length === SAMPLED_FLAG_LENGTH && xraySampledFlag === NOT_SAMPLED) {\n      return TraceFlags.NONE;\n    } else if (xraySampledFlag === IS_SAMPLED) {\n      return TraceFlags.SAMPLED;\n    } else {\n      return null;\n    }\n  }\n}\n"]}