"use strict";/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_rojiwxhoe(){var path="/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts";var hash="77d89e79a4f94bd4b688d76f151b4c665c8cc13d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:14},end:{line:18,column:43}},"2":{start:{line:19,column:15},end:{line:19,column:45}},"3":{start:{line:20,column:15},end:{line:20,column:32}},"4":{start:{line:21,column:28},end:{line:21,column:63}},"5":{start:{line:22,column:0},end:{line:173,column:3}},"6":{start:{line:23,column:27},end:{line:23,column:70}},"7":{start:{line:24,column:21},end:{line:24,column:55}},"8":{start:{line:25,column:20},end:{line:25,column:38}},"9":{start:{line:26,column:31},end:{line:26,column:55}},"10":{start:{line:27,column:35},end:{line:27,column:56}},"11":{start:{line:29,column:4},end:{line:31,column:7}},"12":{start:{line:30,column:8},end:{line:30,column:21}},"13":{start:{line:32,column:4},end:{line:73,column:7}},"14":{start:{line:33,column:8},end:{line:41,column:11}},"15":{start:{line:34,column:32},end:{line:38,column:13}},"16":{start:{line:39,column:12},end:{line:39,column:137}},"17":{start:{line:40,column:12},end:{line:40,column:167}},"18":{start:{line:42,column:8},end:{line:50,column:11}},"19":{start:{line:43,column:32},end:{line:47,column:13}},"20":{start:{line:48,column:12},end:{line:48,column:137}},"21":{start:{line:49,column:12},end:{line:49,column:167}},"22":{start:{line:51,column:8},end:{line:63,column:11}},"23":{start:{line:52,column:31},end:{line:52,column:54}},"24":{start:{line:53,column:12},end:{line:53,column:41}},"25":{start:{line:54,column:32},end:{line:59,column:13}},"26":{start:{line:60,column:12},end:{line:60,column:137}},"27":{start:{line:62,column:12},end:{line:62,column:167}},"28":{start:{line:64,column:8},end:{line:67,column:11}},"29":{start:{line:65,column:12},end:{line:65,column:92}},"30":{start:{line:66,column:12},end:{line:66,column:48}},"31":{start:{line:68,column:8},end:{line:72,column:11}},"32":{start:{line:69,column:32},end:{line:69,column:59}},"33":{start:{line:70,column:12},end:{line:70,column:137}},"34":{start:{line:71,column:12},end:{line:71,column:48}},"35":{start:{line:74,column:4},end:{line:172,column:7}},"36":{start:{line:75,column:8},end:{line:78,column:11}},"37":{start:{line:77,column:12},end:{line:77,column:145}},"38":{start:{line:79,column:8},end:{line:89,column:11}},"39":{start:{line:80,column:12},end:{line:81,column:93}},"40":{start:{line:82,column:41},end:{line:82,column:153}},"41":{start:{line:83,column:12},end:{line:88,column:15}},"42":{start:{line:90,column:8},end:{line:100,column:11}},"43":{start:{line:91,column:12},end:{line:92,column:93}},"44":{start:{line:93,column:41},end:{line:93,column:153}},"45":{start:{line:94,column:12},end:{line:99,column:15}},"46":{start:{line:101,column:8},end:{line:112,column:11}},"47":{start:{line:102,column:12},end:{line:103,column:101}},"48":{start:{line:104,column:41},end:{line:104,column:153}},"49":{start:{line:106,column:12},end:{line:111,column:15}},"50":{start:{line:113,column:8},end:{line:117,column:11}},"51":{start:{line:114,column:12},end:{line:114,column:70}},"52":{start:{line:115,column:41},end:{line:115,column:153}},"53":{start:{line:116,column:12},end:{line:116,column:68}},"54":{start:{line:118,column:8},end:{line:123,column:11}},"55":{start:{line:119,column:12},end:{line:120,column:93}},"56":{start:{line:121,column:41},end:{line:121,column:153}},"57":{start:{line:122,column:12},end:{line:122,column:68}},"58":{start:{line:124,column:8},end:{line:129,column:11}},"59":{start:{line:125,column:12},end:{line:126,column:95}},"60":{start:{line:127,column:41},end:{line:127,column:153}},"61":{start:{line:128,column:12},end:{line:128,column:68}},"62":{start:{line:130,column:8},end:{line:135,column:11}},"63":{start:{line:131,column:12},end:{line:132,column:101}},"64":{start:{line:133,column:41},end:{line:133,column:153}},"65":{start:{line:134,column:12},end:{line:134,column:68}},"66":{start:{line:136,column:8},end:{line:141,column:11}},"67":{start:{line:137,column:12},end:{line:138,column:93}},"68":{start:{line:139,column:41},end:{line:139,column:153}},"69":{start:{line:140,column:12},end:{line:140,column:68}},"70":{start:{line:142,column:8},end:{line:147,column:11}},"71":{start:{line:143,column:12},end:{line:144,column:95}},"72":{start:{line:145,column:41},end:{line:145,column:153}},"73":{start:{line:146,column:12},end:{line:146,column:68}},"74":{start:{line:148,column:8},end:{line:153,column:11}},"75":{start:{line:149,column:12},end:{line:150,column:92}},"76":{start:{line:151,column:41},end:{line:151,column:153}},"77":{start:{line:152,column:12},end:{line:152,column:68}},"78":{start:{line:154,column:8},end:{line:159,column:11}},"79":{start:{line:155,column:12},end:{line:156,column:97}},"80":{start:{line:157,column:41},end:{line:157,column:153}},"81":{start:{line:158,column:12},end:{line:158,column:68}},"82":{start:{line:160,column:8},end:{line:165,column:11}},"83":{start:{line:161,column:12},end:{line:162,column:93}},"84":{start:{line:163,column:41},end:{line:163,column:153}},"85":{start:{line:164,column:12},end:{line:164,column:68}},"86":{start:{line:166,column:8},end:{line:171,column:11}},"87":{start:{line:167,column:12},end:{line:168,column:93}},"88":{start:{line:169,column:41},end:{line:169,column:153}},"89":{start:{line:170,column:12},end:{line:170,column:68}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:22,column:30},end:{line:22,column:31}},loc:{start:{line:22,column:36},end:{line:173,column:1}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:15},end:{line:29,column:16}},loc:{start:{line:29,column:21},end:{line:31,column:5}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:26},end:{line:32,column:27}},loc:{start:{line:32,column:32},end:{line:73,column:5}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:44},end:{line:33,column:45}},loc:{start:{line:33,column:50},end:{line:41,column:9}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:42,column:48},end:{line:42,column:49}},loc:{start:{line:42,column:54},end:{line:50,column:9}},line:42},"5":{name:"(anonymous_5)",decl:{start:{line:51,column:44},end:{line:51,column:45}},loc:{start:{line:51,column:50},end:{line:63,column:9}},line:51},"6":{name:"(anonymous_6)",decl:{start:{line:64,column:65},end:{line:64,column:66}},loc:{start:{line:64,column:71},end:{line:67,column:9}},line:64},"7":{name:"(anonymous_7)",decl:{start:{line:68,column:73},end:{line:68,column:74}},loc:{start:{line:68,column:79},end:{line:72,column:9}},line:68},"8":{name:"(anonymous_8)",decl:{start:{line:74,column:27},end:{line:74,column:28}},loc:{start:{line:74,column:33},end:{line:172,column:5}},line:74},"9":{name:"(anonymous_9)",decl:{start:{line:75,column:43},end:{line:75,column:44}},loc:{start:{line:75,column:49},end:{line:78,column:9}},line:75},"10":{name:"(anonymous_10)",decl:{start:{line:79,column:45},end:{line:79,column:46}},loc:{start:{line:79,column:51},end:{line:89,column:9}},line:79},"11":{name:"(anonymous_11)",decl:{start:{line:90,column:66},end:{line:90,column:67}},loc:{start:{line:90,column:72},end:{line:100,column:9}},line:90},"12":{name:"(anonymous_12)",decl:{start:{line:101,column:60},end:{line:101,column:61}},loc:{start:{line:101,column:66},end:{line:112,column:9}},line:101},"13":{name:"(anonymous_13)",decl:{start:{line:113,column:67},end:{line:113,column:68}},loc:{start:{line:113,column:73},end:{line:117,column:9}},line:113},"14":{name:"(anonymous_14)",decl:{start:{line:118,column:64},end:{line:118,column:65}},loc:{start:{line:118,column:70},end:{line:123,column:9}},line:118},"15":{name:"(anonymous_15)",decl:{start:{line:124,column:69},end:{line:124,column:70}},loc:{start:{line:124,column:75},end:{line:129,column:9}},line:124},"16":{name:"(anonymous_16)",decl:{start:{line:130,column:74},end:{line:130,column:75}},loc:{start:{line:130,column:80},end:{line:135,column:9}},line:130},"17":{name:"(anonymous_17)",decl:{start:{line:136,column:63},end:{line:136,column:64}},loc:{start:{line:136,column:69},end:{line:141,column:9}},line:136},"18":{name:"(anonymous_18)",decl:{start:{line:142,column:68},end:{line:142,column:69}},loc:{start:{line:142,column:74},end:{line:147,column:9}},line:142},"19":{name:"(anonymous_19)",decl:{start:{line:148,column:67},end:{line:148,column:68}},loc:{start:{line:148,column:73},end:{line:153,column:9}},line:148},"20":{name:"(anonymous_20)",decl:{start:{line:154,column:74},end:{line:154,column:75}},loc:{start:{line:154,column:80},end:{line:159,column:9}},line:154},"21":{name:"(anonymous_21)",decl:{start:{line:160,column:78},end:{line:160,column:79}},loc:{start:{line:160,column:84},end:{line:165,column:9}},line:160},"22":{name:"(anonymous_22)",decl:{start:{line:166,column:73},end:{line:166,column:74}},loc:{start:{line:166,column:79},end:{line:171,column:9}},line:166}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},b:{},inputSourceMap:{version:3,file:"/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts",sources:["/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts"],names:[],mappings:"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",sourcesContent:["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  defaultGetter,\n  defaultSetter,\n  SpanContext,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport {\n  getExtractedSpanContext,\n  setExtractedSpanContext,\n  TraceState,\n  INVALID_SPAN_CONTEXT,\n} from '@opentelemetry/core';\nimport * as assert from 'assert';\nimport {\n  AWSXRayPropagator,\n  AWSXRAY_TRACE_ID_HEADER,\n} from '../src/AWSXRayPropagator';\n\ndescribe('AWSXRayPropagator', () => {\n  const xrayPropagator = new AWSXRayPropagator();\n  const TRACE_ID = '8a3c60f7d188f8fa79d48a391a778fa6';\n  const SPAN_ID = '53995c3f42cd8ad8';\n  const SAMPLED_TRACE_FLAG = TraceFlags.SAMPLED;\n  const NOT_SAMPLED_TRACE_FLAG = TraceFlags.NONE;\n\n  let carrier: { [key: string]: unknown };\n\n  beforeEach(() => {\n    carrier = {};\n  });\n\n  describe('.inject()', () => {\n    it('should inject sampled context', () => {\n      const spanContext: SpanContext = {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        traceFlags: SAMPLED_TRACE_FLAG,\n      };\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n\n      assert.deepStrictEqual(\n        carrier[AWSXRAY_TRACE_ID_HEADER],\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1'\n      );\n    });\n\n    it('should inject not sampled context', () => {\n      const spanContext: SpanContext = {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        traceFlags: NOT_SAMPLED_TRACE_FLAG,\n      };\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n\n      assert.deepStrictEqual(\n        carrier[AWSXRAY_TRACE_ID_HEADER],\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=0'\n      );\n    });\n\n    it('should inject with TraceState', () => {\n      const traceState = new TraceState();\n      traceState.set('foo', 'bar');\n      const spanContext: SpanContext = {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        traceFlags: SAMPLED_TRACE_FLAG,\n        traceState: traceState,\n      };\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n\n      // TODO: assert trace state when the propagator supports it\n      assert.deepStrictEqual(\n        carrier[AWSXRAY_TRACE_ID_HEADER],\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1'\n      );\n    });\n\n    it('inject without spanContext - should inject nothing', () => {\n      xrayPropagator.inject(Context.ROOT_CONTEXT, carrier, defaultSetter);\n\n      assert.deepStrictEqual(carrier, {});\n    });\n\n    it('inject default invalid spanContext - should inject nothing', () => {\n      const spanContext: SpanContext = INVALID_SPAN_CONTEXT;\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n\n      assert.deepStrictEqual(carrier, {});\n    });\n  });\n\n  describe('.extract()', () => {\n    it('extract nothing from context', () => {\n      // context remains untouched\n      assert.deepStrictEqual(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter),\n        Context.ROOT_CONTEXT\n      );\n    });\n\n    it('should extract sampled context', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        isRemote: true,\n        traceFlags: TraceFlags.SAMPLED,\n      });\n    });\n\n    it('should extract sampled context with arbitrary order', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Parent=53995c3f42cd8ad8;Sampled=1;Root=1-8a3c60f7-d188f8fa79d48a391a778fa6';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        isRemote: true,\n        traceFlags: TraceFlags.SAMPLED,\n      });\n    });\n\n    it('should extract context with additional fields', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1;Foo=Bar';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      // TODO: assert additional fields when the propagator supports it\n      assert.deepStrictEqual(extractedSpanContext, {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        isRemote: true,\n        traceFlags: TraceFlags.SAMPLED,\n      });\n    });\n\n    it('extract empty header value - should return undefined', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = '';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid traceId - should return undefined', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=1-abcdefgh-ijklmnopabcdefghijklmnop;Parent=53995c3f42cd8ad8;Sampled=0';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid traceId size - should return undefined', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa600;Parent=53995c3f42cd8ad8;Sampled=0';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid traceId delimiter - should return undefined', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=1*8a3c60f7+d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1;Foo=Bar';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid spanId - should return undefined', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=abcdefghijklmnop;Sampled=0';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid spanId size - should return undefined', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad800;Sampled=0';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid traceFlags - should return undefined', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid traceFlags length - should return undefined', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=10220';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract nonnumeric invalid traceFlags - should return undefined', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=a';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n\n    it('extract invalid aws xray version - should return undefined', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] =\n        'Root=2-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1';\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(Context.ROOT_CONTEXT, carrier, defaultGetter)\n      );\n\n      assert.deepStrictEqual(extractedSpanContext, undefined);\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"77d89e79a4f94bd4b688d76f151b4c665c8cc13d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_rojiwxhoe=function(){return actualCoverage;};}return actualCoverage;}cov_rojiwxhoe();cov_rojiwxhoe().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const api_1=(cov_rojiwxhoe().s[1]++,require("@opentelemetry/api"));const core_1=(cov_rojiwxhoe().s[2]++,require("@opentelemetry/core"));const assert=(cov_rojiwxhoe().s[3]++,require("assert"));const AWSXRayPropagator_1=(cov_rojiwxhoe().s[4]++,require("../src/AWSXRayPropagator"));cov_rojiwxhoe().s[5]++;describe('AWSXRayPropagator',()=>{cov_rojiwxhoe().f[0]++;const xrayPropagator=(cov_rojiwxhoe().s[6]++,new AWSXRayPropagator_1.AWSXRayPropagator());const TRACE_ID=(cov_rojiwxhoe().s[7]++,'8a3c60f7d188f8fa79d48a391a778fa6');const SPAN_ID=(cov_rojiwxhoe().s[8]++,'53995c3f42cd8ad8');const SAMPLED_TRACE_FLAG=(cov_rojiwxhoe().s[9]++,api_1.TraceFlags.SAMPLED);const NOT_SAMPLED_TRACE_FLAG=(cov_rojiwxhoe().s[10]++,api_1.TraceFlags.NONE);let carrier;cov_rojiwxhoe().s[11]++;beforeEach(()=>{cov_rojiwxhoe().f[1]++;cov_rojiwxhoe().s[12]++;carrier={};});cov_rojiwxhoe().s[13]++;describe('.inject()',()=>{cov_rojiwxhoe().f[2]++;cov_rojiwxhoe().s[14]++;it('should inject sampled context',()=>{cov_rojiwxhoe().f[3]++;const spanContext=(cov_rojiwxhoe().s[15]++,{traceId:TRACE_ID,spanId:SPAN_ID,traceFlags:SAMPLED_TRACE_FLAG});cov_rojiwxhoe().s[16]++;xrayPropagator.inject(core_1.setExtractedSpanContext(api_1.Context.ROOT_CONTEXT,spanContext),carrier,api_1.defaultSetter);cov_rojiwxhoe().s[17]++;assert.deepStrictEqual(carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER],'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1');});cov_rojiwxhoe().s[18]++;it('should inject not sampled context',()=>{cov_rojiwxhoe().f[4]++;const spanContext=(cov_rojiwxhoe().s[19]++,{traceId:TRACE_ID,spanId:SPAN_ID,traceFlags:NOT_SAMPLED_TRACE_FLAG});cov_rojiwxhoe().s[20]++;xrayPropagator.inject(core_1.setExtractedSpanContext(api_1.Context.ROOT_CONTEXT,spanContext),carrier,api_1.defaultSetter);cov_rojiwxhoe().s[21]++;assert.deepStrictEqual(carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER],'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=0');});cov_rojiwxhoe().s[22]++;it('should inject with TraceState',()=>{cov_rojiwxhoe().f[5]++;const traceState=(cov_rojiwxhoe().s[23]++,new core_1.TraceState());cov_rojiwxhoe().s[24]++;traceState.set('foo','bar');const spanContext=(cov_rojiwxhoe().s[25]++,{traceId:TRACE_ID,spanId:SPAN_ID,traceFlags:SAMPLED_TRACE_FLAG,traceState:traceState});cov_rojiwxhoe().s[26]++;xrayPropagator.inject(core_1.setExtractedSpanContext(api_1.Context.ROOT_CONTEXT,spanContext),carrier,api_1.defaultSetter);// TODO: assert trace state when the propagator supports it
cov_rojiwxhoe().s[27]++;assert.deepStrictEqual(carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER],'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1');});cov_rojiwxhoe().s[28]++;it('inject without spanContext - should inject nothing',()=>{cov_rojiwxhoe().f[6]++;cov_rojiwxhoe().s[29]++;xrayPropagator.inject(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultSetter);cov_rojiwxhoe().s[30]++;assert.deepStrictEqual(carrier,{});});cov_rojiwxhoe().s[31]++;it('inject default invalid spanContext - should inject nothing',()=>{cov_rojiwxhoe().f[7]++;const spanContext=(cov_rojiwxhoe().s[32]++,core_1.INVALID_SPAN_CONTEXT);cov_rojiwxhoe().s[33]++;xrayPropagator.inject(core_1.setExtractedSpanContext(api_1.Context.ROOT_CONTEXT,spanContext),carrier,api_1.defaultSetter);cov_rojiwxhoe().s[34]++;assert.deepStrictEqual(carrier,{});});});cov_rojiwxhoe().s[35]++;describe('.extract()',()=>{cov_rojiwxhoe().f[8]++;cov_rojiwxhoe().s[36]++;it('extract nothing from context',()=>{cov_rojiwxhoe().f[9]++;cov_rojiwxhoe().s[37]++;// context remains untouched
assert.deepStrictEqual(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter),api_1.Context.ROOT_CONTEXT);});cov_rojiwxhoe().s[38]++;it('should extract sampled context',()=>{cov_rojiwxhoe().f[10]++;cov_rojiwxhoe().s[39]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1';const extractedSpanContext=(cov_rojiwxhoe().s[40]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[41]++;assert.deepStrictEqual(extractedSpanContext,{traceId:TRACE_ID,spanId:SPAN_ID,isRemote:true,traceFlags:api_1.TraceFlags.SAMPLED});});cov_rojiwxhoe().s[42]++;it('should extract sampled context with arbitrary order',()=>{cov_rojiwxhoe().f[11]++;cov_rojiwxhoe().s[43]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Parent=53995c3f42cd8ad8;Sampled=1;Root=1-8a3c60f7-d188f8fa79d48a391a778fa6';const extractedSpanContext=(cov_rojiwxhoe().s[44]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[45]++;assert.deepStrictEqual(extractedSpanContext,{traceId:TRACE_ID,spanId:SPAN_ID,isRemote:true,traceFlags:api_1.TraceFlags.SAMPLED});});cov_rojiwxhoe().s[46]++;it('should extract context with additional fields',()=>{cov_rojiwxhoe().f[12]++;cov_rojiwxhoe().s[47]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1;Foo=Bar';const extractedSpanContext=(cov_rojiwxhoe().s[48]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));// TODO: assert additional fields when the propagator supports it
cov_rojiwxhoe().s[49]++;assert.deepStrictEqual(extractedSpanContext,{traceId:TRACE_ID,spanId:SPAN_ID,isRemote:true,traceFlags:api_1.TraceFlags.SAMPLED});});cov_rojiwxhoe().s[50]++;it('extract empty header value - should return undefined',()=>{cov_rojiwxhoe().f[13]++;cov_rojiwxhoe().s[51]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='';const extractedSpanContext=(cov_rojiwxhoe().s[52]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[53]++;assert.deepStrictEqual(extractedSpanContext,undefined);});cov_rojiwxhoe().s[54]++;it('extract invalid traceId - should return undefined',()=>{cov_rojiwxhoe().f[14]++;cov_rojiwxhoe().s[55]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1-abcdefgh-ijklmnopabcdefghijklmnop;Parent=53995c3f42cd8ad8;Sampled=0';const extractedSpanContext=(cov_rojiwxhoe().s[56]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[57]++;assert.deepStrictEqual(extractedSpanContext,undefined);});cov_rojiwxhoe().s[58]++;it('extract invalid traceId size - should return undefined',()=>{cov_rojiwxhoe().f[15]++;cov_rojiwxhoe().s[59]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1-8a3c60f7-d188f8fa79d48a391a778fa600;Parent=53995c3f42cd8ad8;Sampled=0';const extractedSpanContext=(cov_rojiwxhoe().s[60]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[61]++;assert.deepStrictEqual(extractedSpanContext,undefined);});cov_rojiwxhoe().s[62]++;it('extract invalid traceId delimiter - should return undefined',()=>{cov_rojiwxhoe().f[16]++;cov_rojiwxhoe().s[63]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1*8a3c60f7+d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1;Foo=Bar';const extractedSpanContext=(cov_rojiwxhoe().s[64]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[65]++;assert.deepStrictEqual(extractedSpanContext,undefined);});cov_rojiwxhoe().s[66]++;it('extract invalid spanId - should return undefined',()=>{cov_rojiwxhoe().f[17]++;cov_rojiwxhoe().s[67]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=abcdefghijklmnop;Sampled=0';const extractedSpanContext=(cov_rojiwxhoe().s[68]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[69]++;assert.deepStrictEqual(extractedSpanContext,undefined);});cov_rojiwxhoe().s[70]++;it('extract invalid spanId size - should return undefined',()=>{cov_rojiwxhoe().f[18]++;cov_rojiwxhoe().s[71]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad800;Sampled=0';const extractedSpanContext=(cov_rojiwxhoe().s[72]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[73]++;assert.deepStrictEqual(extractedSpanContext,undefined);});cov_rojiwxhoe().s[74]++;it('extract invalid traceFlags - should return undefined',()=>{cov_rojiwxhoe().f[19]++;cov_rojiwxhoe().s[75]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=';const extractedSpanContext=(cov_rojiwxhoe().s[76]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[77]++;assert.deepStrictEqual(extractedSpanContext,undefined);});cov_rojiwxhoe().s[78]++;it('extract invalid traceFlags length - should return undefined',()=>{cov_rojiwxhoe().f[20]++;cov_rojiwxhoe().s[79]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=10220';const extractedSpanContext=(cov_rojiwxhoe().s[80]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[81]++;assert.deepStrictEqual(extractedSpanContext,undefined);});cov_rojiwxhoe().s[82]++;it('extract nonnumeric invalid traceFlags - should return undefined',()=>{cov_rojiwxhoe().f[21]++;cov_rojiwxhoe().s[83]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=a';const extractedSpanContext=(cov_rojiwxhoe().s[84]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[85]++;assert.deepStrictEqual(extractedSpanContext,undefined);});cov_rojiwxhoe().s[86]++;it('extract invalid aws xray version - should return undefined',()=>{cov_rojiwxhoe().f[22]++;cov_rojiwxhoe().s[87]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=2-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1';const extractedSpanContext=(cov_rojiwxhoe().s[88]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[89]++;assert.deepStrictEqual(extractedSpanContext,undefined);});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,