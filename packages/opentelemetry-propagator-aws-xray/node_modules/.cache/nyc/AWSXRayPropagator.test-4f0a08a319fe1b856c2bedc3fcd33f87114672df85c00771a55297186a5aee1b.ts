"use strict";/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_rojiwxhoe(){var path="/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts";var hash="8f1fa3ff8f6b6a3892294932b2df86759f3f212c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:14},end:{line:18,column:43}},"2":{start:{line:19,column:15},end:{line:19,column:45}},"3":{start:{line:20,column:15},end:{line:20,column:32}},"4":{start:{line:21,column:28},end:{line:21,column:63}},"5":{start:{line:22,column:0},end:{line:45,column:3}},"6":{start:{line:23,column:27},end:{line:23,column:70}},"7":{start:{line:24,column:21},end:{line:24,column:55}},"8":{start:{line:25,column:20},end:{line:25,column:38}},"9":{start:{line:26,column:31},end:{line:26,column:55}},"10":{start:{line:27,column:34},end:{line:27,column:55}},"11":{start:{line:29,column:4},end:{line:31,column:7}},"12":{start:{line:30,column:8},end:{line:30,column:21}},"13":{start:{line:32,column:4},end:{line:42,column:7}},"14":{start:{line:33,column:8},end:{line:41,column:11}},"15":{start:{line:34,column:32},end:{line:38,column:13}},"16":{start:{line:39,column:12},end:{line:39,column:137}},"17":{start:{line:40,column:12},end:{line:40,column:167}},"18":{start:{line:43,column:4},end:{line:44,column:7}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:22,column:30},end:{line:22,column:31}},loc:{start:{line:22,column:36},end:{line:45,column:1}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:15},end:{line:29,column:16}},loc:{start:{line:29,column:21},end:{line:31,column:5}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:26},end:{line:32,column:27}},loc:{start:{line:32,column:32},end:{line:42,column:5}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:37},end:{line:33,column:38}},loc:{start:{line:33,column:43},end:{line:41,column:9}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:43,column:27},end:{line:43,column:28}},loc:{start:{line:43,column:33},end:{line:44,column:5}},line:43}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},inputSourceMap:{version:3,file:"/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts",sources:["/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,4CAM4B;AAC5B,8CAG6B;AAC7B,iCAAiC;AACjC,gEAGkC;AAElC,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,MAAM,cAAc,GAAG,IAAI,qCAAiB,EAAE,CAAC;IAC/C,MAAM,QAAQ,GAAG,kCAAkC,CAAC;IACpD,MAAM,OAAO,GAAG,kBAAkB,CAAC;IACnC,MAAM,kBAAkB,GAAG,gBAAU,CAAC,OAAO,CAAC;IAC9C,MAAM,qBAAqB,GAAG,gBAAU,CAAC,IAAI,CAAC;IAE9C,IAAI,OAAmC,CAAC;IAExC,UAAU,CAAC,GAAG,EAAE;QACd,OAAO,GAAG,EAAE,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,MAAM,WAAW,GAAgB;gBAC/B,OAAO,EAAE,QAAQ;gBACjB,MAAM,EAAE,OAAO;gBACf,UAAU,EAAE,kBAAkB;aAC/B,CAAA;YACD,cAAc,CAAC,MAAM,CACnB,8BAAuB,CAAC,aAAO,CAAC,YAAY,EAAE,WAAW,CAAC,EAC1D,OAAO,EACP,mBAAa,CACd,CAAC;YACF,MAAM,CAAC,eAAe,CACpB,OAAO,CAAC,2CAAuB,CAAC,EAChC,4EAA4E,CAC7E,CAAA;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAE5B,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC",sourcesContent:["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  defaultGetter,\n  defaultSetter,\n  SpanContext,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport {\n  getExtractedSpanContext,\n  setExtractedSpanContext,\n} from '@opentelemetry/core';\nimport * as assert from 'assert';\nimport {\n  AWSXRayPropagator,\n  AWSXRAY_TRACE_ID_HEADER,\n} from '../src/AWSXRayPropagator';\n\ndescribe('AWSXRayPropagator', () => {\n  const xrayPropagator = new AWSXRayPropagator();\n  const TRACE_ID = \"8a3c60f7d188f8fa79d48a391a778fa6\";\n  const SPAN_ID = \"53995c3f42cd8ad8\";\n  const SAMPLED_TRACE_FLAG = TraceFlags.SAMPLED;\n  const NOTSAMPLED_TRACE_FLAG = TraceFlags.NONE;\n\n  let carrier: { [key: string]: unknown };\n\n  beforeEach(() => {\n    carrier = {};\n  });\n\n  describe('.inject()', () => {\n    it('inject sampled context', () => {\n      const spanContext: SpanContext = {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        traceFlags: SAMPLED_TRACE_FLAG,\n      }\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n      assert.deepStrictEqual(\n        carrier[AWSXRAY_TRACE_ID_HEADER],\n        \"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1\"\n      )\n    });\n  });\n\n  describe('.extract()', () => {\n\n  });\n    \n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8f1fa3ff8f6b6a3892294932b2df86759f3f212c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_rojiwxhoe=function(){return actualCoverage;};}return actualCoverage;}cov_rojiwxhoe();cov_rojiwxhoe().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const api_1=(cov_rojiwxhoe().s[1]++,require("@opentelemetry/api"));const core_1=(cov_rojiwxhoe().s[2]++,require("@opentelemetry/core"));const assert=(cov_rojiwxhoe().s[3]++,require("assert"));const AWSXRayPropagator_1=(cov_rojiwxhoe().s[4]++,require("../src/AWSXRayPropagator"));cov_rojiwxhoe().s[5]++;describe('AWSXRayPropagator',()=>{cov_rojiwxhoe().f[0]++;const xrayPropagator=(cov_rojiwxhoe().s[6]++,new AWSXRayPropagator_1.AWSXRayPropagator());const TRACE_ID=(cov_rojiwxhoe().s[7]++,"8a3c60f7d188f8fa79d48a391a778fa6");const SPAN_ID=(cov_rojiwxhoe().s[8]++,"53995c3f42cd8ad8");const SAMPLED_TRACE_FLAG=(cov_rojiwxhoe().s[9]++,api_1.TraceFlags.SAMPLED);const NOTSAMPLED_TRACE_FLAG=(cov_rojiwxhoe().s[10]++,api_1.TraceFlags.NONE);let carrier;cov_rojiwxhoe().s[11]++;beforeEach(()=>{cov_rojiwxhoe().f[1]++;cov_rojiwxhoe().s[12]++;carrier={};});cov_rojiwxhoe().s[13]++;describe('.inject()',()=>{cov_rojiwxhoe().f[2]++;cov_rojiwxhoe().s[14]++;it('inject sampled context',()=>{cov_rojiwxhoe().f[3]++;const spanContext=(cov_rojiwxhoe().s[15]++,{traceId:TRACE_ID,spanId:SPAN_ID,traceFlags:SAMPLED_TRACE_FLAG});cov_rojiwxhoe().s[16]++;xrayPropagator.inject(core_1.setExtractedSpanContext(api_1.Context.ROOT_CONTEXT,spanContext),carrier,api_1.defaultSetter);cov_rojiwxhoe().s[17]++;assert.deepStrictEqual(carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER],"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1");});});cov_rojiwxhoe().s[18]++;describe('.extract()',()=>{cov_rojiwxhoe().f[4]++;});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3pvY29uZy9Eb2N1bWVudHMvZm9ya2VkL29wZW50ZWxlbWV0cnktanMtY29udHJpYi9wcm9wYWdhdG9ycy9vcGVudGVsZW1ldHJ5LXByb3BhZ2F0b3ItYXdzLXhyYXkvdGVzdC9BV1NYUmF5UHJvcGFnYXRvci50ZXN0LnRzIiwic291cmNlcyI6WyIvVXNlcnMvem9jb25nL0RvY3VtZW50cy9mb3JrZWQvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL3Byb3BhZ2F0b3JzL29wZW50ZWxlbWV0cnktcHJvcGFnYXRvci1hd3MteHJheS90ZXN0L0FXU1hSYXlQcm9wYWdhdG9yLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOztBQUVILDRDQU00QjtBQUM1Qiw4Q0FHNkI7QUFDN0IsaUNBQWlDO0FBQ2pDLGdFQUdrQztBQUVsQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLE1BQU0sY0FBYyxHQUFHLElBQUkscUNBQWlCLEVBQUUsQ0FBQztJQUMvQyxNQUFNLFFBQVEsR0FBRyxrQ0FBa0MsQ0FBQztJQUNwRCxNQUFNLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQztJQUNuQyxNQUFNLGtCQUFrQixHQUFHLGdCQUFVLENBQUMsT0FBTyxDQUFDO0lBQzlDLE1BQU0scUJBQXFCLEdBQUcsZ0JBQVUsQ0FBQyxJQUFJLENBQUM7SUFFOUMsSUFBSSxPQUFtQyxDQUFDO0lBRXhDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtRQUN6QixFQUFFLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO1lBQ2hDLE1BQU0sV0FBVyxHQUFnQjtnQkFDL0IsT0FBTyxFQUFFLFFBQVE7Z0JBQ2pCLE1BQU0sRUFBRSxPQUFPO2dCQUNmLFVBQVUsRUFBRSxrQkFBa0I7YUFDL0IsQ0FBQTtZQUNELGNBQWMsQ0FBQyxNQUFNLENBQ25CLDhCQUF1QixDQUFDLGFBQU8sQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLEVBQzFELE9BQU8sRUFDUCxtQkFBYSxDQUNkLENBQUM7WUFDRixNQUFNLENBQUMsZUFBZSxDQUNwQixPQUFPLENBQUMsMkNBQXVCLENBQUMsRUFDaEMsNEVBQTRFLENBQzdFLENBQUE7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFFNUIsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIENvbnRleHQsXG4gIGRlZmF1bHRHZXR0ZXIsXG4gIGRlZmF1bHRTZXR0ZXIsXG4gIFNwYW5Db250ZXh0LFxuICBUcmFjZUZsYWdzLFxufSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHtcbiAgZ2V0RXh0cmFjdGVkU3BhbkNvbnRleHQsXG4gIHNldEV4dHJhY3RlZFNwYW5Db250ZXh0LFxufSBmcm9tICdAb3BlbnRlbGVtZXRyeS9jb3JlJztcbmltcG9ydCAqIGFzIGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHtcbiAgQVdTWFJheVByb3BhZ2F0b3IsXG4gIEFXU1hSQVlfVFJBQ0VfSURfSEVBREVSLFxufSBmcm9tICcuLi9zcmMvQVdTWFJheVByb3BhZ2F0b3InO1xuXG5kZXNjcmliZSgnQVdTWFJheVByb3BhZ2F0b3InLCAoKSA9PiB7XG4gIGNvbnN0IHhyYXlQcm9wYWdhdG9yID0gbmV3IEFXU1hSYXlQcm9wYWdhdG9yKCk7XG4gIGNvbnN0IFRSQUNFX0lEID0gXCI4YTNjNjBmN2QxODhmOGZhNzlkNDhhMzkxYTc3OGZhNlwiO1xuICBjb25zdCBTUEFOX0lEID0gXCI1Mzk5NWMzZjQyY2Q4YWQ4XCI7XG4gIGNvbnN0IFNBTVBMRURfVFJBQ0VfRkxBRyA9IFRyYWNlRmxhZ3MuU0FNUExFRDtcbiAgY29uc3QgTk9UU0FNUExFRF9UUkFDRV9GTEFHID0gVHJhY2VGbGFncy5OT05FO1xuXG4gIGxldCBjYXJyaWVyOiB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBjYXJyaWVyID0ge307XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCcuaW5qZWN0KCknLCAoKSA9PiB7XG4gICAgaXQoJ2luamVjdCBzYW1wbGVkIGNvbnRleHQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzcGFuQ29udGV4dDogU3BhbkNvbnRleHQgPSB7XG4gICAgICAgIHRyYWNlSWQ6IFRSQUNFX0lELFxuICAgICAgICBzcGFuSWQ6IFNQQU5fSUQsXG4gICAgICAgIHRyYWNlRmxhZ3M6IFNBTVBMRURfVFJBQ0VfRkxBRyxcbiAgICAgIH1cbiAgICAgIHhyYXlQcm9wYWdhdG9yLmluamVjdChcbiAgICAgICAgc2V0RXh0cmFjdGVkU3BhbkNvbnRleHQoQ29udGV4dC5ST09UX0NPTlRFWFQsIHNwYW5Db250ZXh0KSxcbiAgICAgICAgY2FycmllcixcbiAgICAgICAgZGVmYXVsdFNldHRlclxuICAgICAgKTtcbiAgICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwoXG4gICAgICAgIGNhcnJpZXJbQVdTWFJBWV9UUkFDRV9JRF9IRUFERVJdLFxuICAgICAgICBcIlJvb3Q9MS04YTNjNjBmNy1kMTg4ZjhmYTc5ZDQ4YTM5MWE3NzhmYTY7UGFyZW50PTUzOTk1YzNmNDJjZDhhZDg7U2FtcGxlZD0xXCJcbiAgICAgIClcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJy5leHRyYWN0KCknLCAoKSA9PiB7XG5cbiAgfSk7XG4gICAgXG59KTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy96b2NvbmcvRG9jdW1lbnRzL2ZvcmtlZC9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvcHJvcGFnYXRvcnMvb3BlbnRlbGVtZXRyeS1wcm9wYWdhdG9yLWF3cy14cmF5L3Rlc3QvQVdTWFJheVByb3BhZ2F0b3IudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiYUFBQTs7Ozs7Ozs7Ozs7Ozs7Z3hMQWNHO3lLQUVILEtBQUEsQ0FBQSxLQUFBLHlCQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUEsQ0FPQSxLQUFBLENBQUEsTUFBQSx5QkFBQSxPQUFBLENBQUEscUJBQUEsQ0FBQSxDQUFBLENBSUEsS0FBQSxDQUFBLE1BQUEseUJBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLENBQ0EsS0FBQSxDQUFBLG1CQUFBLHlCQUFBLE9BQUEsQ0FBQSwwQkFBQSxDQUFBLENBQUEsQyx1QkFLQSxRQUFRLENBQUMsbUJBQUQsQ0FBc0IsSUFBSyx3QkFDakMsS0FBTSxDQUFBLGNBQWMseUJBQUcsR0FBSSxDQUFBLG1CQUFBLENBQUEsaUJBQUosRUFBSCxDQUFwQixDQUNBLEtBQU0sQ0FBQSxRQUFRLHlCQUFHLGtDQUFILENBQWQsQ0FDQSxLQUFNLENBQUEsT0FBTyx5QkFBRyxrQkFBSCxDQUFiLENBQ0EsS0FBTSxDQUFBLGtCQUFrQix5QkFBRyxLQUFBLENBQUEsVUFBQSxDQUFXLE9BQWQsQ0FBeEIsQ0FDQSxLQUFNLENBQUEscUJBQXFCLDBCQUFHLEtBQUEsQ0FBQSxVQUFBLENBQVcsSUFBZCxDQUEzQixDQUVBLEdBQUksQ0FBQSxPQUFKLENBUGlDLHdCQVNqQyxVQUFVLENBQUMsSUFBSyxnREFDZCxPQUFPLENBQUcsRUFBVixDQUNELENBRlMsQ0FBVixDQVRpQyx3QkFhakMsUUFBUSxDQUFDLFdBQUQsQ0FBYyxJQUFLLGdEQUN6QixFQUFFLENBQUMsd0JBQUQsQ0FBMkIsSUFBSyx3QkFDaEMsS0FBTSxDQUFBLFdBQVcsMEJBQWdCLENBQy9CLE9BQU8sQ0FBRSxRQURzQixDQUUvQixNQUFNLENBQUUsT0FGdUIsQ0FHL0IsVUFBVSxDQUFFLGtCQUhtQixDQUFoQixDQUFqQixDQURnQyx3QkFNaEMsY0FBYyxDQUFDLE1BQWYsQ0FDRSxNQUFBLENBQUEsdUJBQUEsQ0FBd0IsS0FBQSxDQUFBLE9BQUEsQ0FBUSxZQUFoQyxDQUE4QyxXQUE5QyxDQURGLENBRUUsT0FGRixDQUdFLEtBQUEsQ0FBQSxhQUhGLEVBTmdDLHdCQVdoQyxNQUFNLENBQUMsZUFBUCxDQUNFLE9BQU8sQ0FBQyxtQkFBQSxDQUFBLHVCQUFELENBRFQsQ0FFRSw0RUFGRixFQUlELENBZkMsQ0FBRixDQWdCRCxDQWpCTyxDQUFSLENBYmlDLHdCQWdDakMsUUFBUSxDQUFDLFlBQUQsQ0FBZSxJQUFLLHdCQUUzQixDQUZPLENBQVIsQ0FJRCxDQXBDTyxDQUFSLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBDb250ZXh0LFxuICBkZWZhdWx0R2V0dGVyLFxuICBkZWZhdWx0U2V0dGVyLFxuICBTcGFuQ29udGV4dCxcbiAgVHJhY2VGbGFncyxcbn0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmltcG9ydCB7XG4gIGdldEV4dHJhY3RlZFNwYW5Db250ZXh0LFxuICBzZXRFeHRyYWN0ZWRTcGFuQ29udGV4dCxcbn0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG5pbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCB7XG4gIEFXU1hSYXlQcm9wYWdhdG9yLFxuICBBV1NYUkFZX1RSQUNFX0lEX0hFQURFUixcbn0gZnJvbSAnLi4vc3JjL0FXU1hSYXlQcm9wYWdhdG9yJztcblxuZGVzY3JpYmUoJ0FXU1hSYXlQcm9wYWdhdG9yJywgKCkgPT4ge1xuICBjb25zdCB4cmF5UHJvcGFnYXRvciA9IG5ldyBBV1NYUmF5UHJvcGFnYXRvcigpO1xuICBjb25zdCBUUkFDRV9JRCA9IFwiOGEzYzYwZjdkMTg4ZjhmYTc5ZDQ4YTM5MWE3NzhmYTZcIjtcbiAgY29uc3QgU1BBTl9JRCA9IFwiNTM5OTVjM2Y0MmNkOGFkOFwiO1xuICBjb25zdCBTQU1QTEVEX1RSQUNFX0ZMQUcgPSBUcmFjZUZsYWdzLlNBTVBMRUQ7XG4gIGNvbnN0IE5PVFNBTVBMRURfVFJBQ0VfRkxBRyA9IFRyYWNlRmxhZ3MuTk9ORTtcblxuICBsZXQgY2FycmllcjogeyBba2V5OiBzdHJpbmddOiB1bmtub3duIH07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgY2FycmllciA9IHt9O1xuICB9KTtcblxuICBkZXNjcmliZSgnLmluamVjdCgpJywgKCkgPT4ge1xuICAgIGl0KCdpbmplY3Qgc2FtcGxlZCBjb250ZXh0JywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3BhbkNvbnRleHQ6IFNwYW5Db250ZXh0ID0ge1xuICAgICAgICB0cmFjZUlkOiBUUkFDRV9JRCxcbiAgICAgICAgc3BhbklkOiBTUEFOX0lELFxuICAgICAgICB0cmFjZUZsYWdzOiBTQU1QTEVEX1RSQUNFX0ZMQUcsXG4gICAgICB9XG4gICAgICB4cmF5UHJvcGFnYXRvci5pbmplY3QoXG4gICAgICAgIHNldEV4dHJhY3RlZFNwYW5Db250ZXh0KENvbnRleHQuUk9PVF9DT05URVhULCBzcGFuQ29udGV4dCksXG4gICAgICAgIGNhcnJpZXIsXG4gICAgICAgIGRlZmF1bHRTZXR0ZXJcbiAgICAgICk7XG4gICAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxuICAgICAgICBjYXJyaWVyW0FXU1hSQVlfVFJBQ0VfSURfSEVBREVSXSxcbiAgICAgICAgXCJSb290PTEtOGEzYzYwZjctZDE4OGY4ZmE3OWQ0OGEzOTFhNzc4ZmE2O1BhcmVudD01Mzk5NWMzZjQyY2Q4YWQ4O1NhbXBsZWQ9MVwiXG4gICAgICApXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCcuZXh0cmFjdCgpJywgKCkgPT4ge1xuXG4gIH0pO1xuICAgIFxufSk7XG4iXX0=