"use strict";/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_rojiwxhoe(){var path="/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts";var hash="a22309b2af1740d9e343cfa36094a45fc6b2f6fb";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:14},end:{line:18,column:43}},"2":{start:{line:19,column:15},end:{line:19,column:45}},"3":{start:{line:20,column:15},end:{line:20,column:32}},"4":{start:{line:21,column:28},end:{line:21,column:63}},"5":{start:{line:22,column:0},end:{line:93,column:3}},"6":{start:{line:23,column:27},end:{line:23,column:70}},"7":{start:{line:24,column:21},end:{line:24,column:55}},"8":{start:{line:25,column:20},end:{line:25,column:38}},"9":{start:{line:26,column:31},end:{line:26,column:55}},"10":{start:{line:27,column:35},end:{line:27,column:56}},"11":{start:{line:29,column:4},end:{line:31,column:7}},"12":{start:{line:30,column:8},end:{line:30,column:21}},"13":{start:{line:32,column:4},end:{line:64,column:7}},"14":{start:{line:33,column:8},end:{line:41,column:11}},"15":{start:{line:34,column:32},end:{line:38,column:13}},"16":{start:{line:39,column:12},end:{line:39,column:137}},"17":{start:{line:40,column:12},end:{line:40,column:167}},"18":{start:{line:42,column:8},end:{line:50,column:11}},"19":{start:{line:43,column:32},end:{line:47,column:13}},"20":{start:{line:48,column:12},end:{line:48,column:137}},"21":{start:{line:49,column:12},end:{line:49,column:167}},"22":{start:{line:51,column:8},end:{line:63,column:11}},"23":{start:{line:52,column:31},end:{line:52,column:54}},"24":{start:{line:53,column:12},end:{line:53,column:41}},"25":{start:{line:54,column:32},end:{line:59,column:13}},"26":{start:{line:60,column:12},end:{line:60,column:137}},"27":{start:{line:62,column:12},end:{line:62,column:167}},"28":{start:{line:65,column:4},end:{line:92,column:7}},"29":{start:{line:66,column:8},end:{line:69,column:11}},"30":{start:{line:68,column:12},end:{line:68,column:145}},"31":{start:{line:70,column:8},end:{line:80,column:11}},"32":{start:{line:71,column:12},end:{line:72,column:93}},"33":{start:{line:73,column:41},end:{line:73,column:153}},"34":{start:{line:74,column:12},end:{line:79,column:15}},"35":{start:{line:81,column:8},end:{line:91,column:11}},"36":{start:{line:82,column:12},end:{line:83,column:93}},"37":{start:{line:84,column:41},end:{line:84,column:153}},"38":{start:{line:85,column:12},end:{line:90,column:15}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:22,column:30},end:{line:22,column:31}},loc:{start:{line:22,column:36},end:{line:93,column:1}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:15},end:{line:29,column:16}},loc:{start:{line:29,column:21},end:{line:31,column:5}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:26},end:{line:32,column:27}},loc:{start:{line:32,column:32},end:{line:64,column:5}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:37},end:{line:33,column:38}},loc:{start:{line:33,column:43},end:{line:41,column:9}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:42,column:41},end:{line:42,column:42}},loc:{start:{line:42,column:47},end:{line:50,column:9}},line:42},"5":{name:"(anonymous_5)",decl:{start:{line:51,column:37},end:{line:51,column:38}},loc:{start:{line:51,column:43},end:{line:63,column:9}},line:51},"6":{name:"(anonymous_6)",decl:{start:{line:65,column:27},end:{line:65,column:28}},loc:{start:{line:65,column:33},end:{line:92,column:5}},line:65},"7":{name:"(anonymous_7)",decl:{start:{line:66,column:43},end:{line:66,column:44}},loc:{start:{line:66,column:49},end:{line:69,column:9}},line:66},"8":{name:"(anonymous_8)",decl:{start:{line:70,column:38},end:{line:70,column:39}},loc:{start:{line:70,column:44},end:{line:80,column:9}},line:70},"9":{name:"(anonymous_9)",decl:{start:{line:81,column:59},end:{line:81,column:60}},loc:{start:{line:81,column:65},end:{line:91,column:9}},line:81}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{},inputSourceMap:{version:3,file:"/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts",sources:["/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/test/AWSXRayPropagator.test.ts"],names:[],mappings:"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",sourcesContent:["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  defaultGetter,\n  defaultSetter,\n  SpanContext,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport {\n  getExtractedSpanContext,\n  setExtractedSpanContext,\n  TraceState,\n} from '@opentelemetry/core';\nimport * as assert from 'assert';\nimport {\n  AWSXRayPropagator,\n  AWSXRAY_TRACE_ID_HEADER,\n} from '../src/AWSXRayPropagator';\n\ndescribe('AWSXRayPropagator', () => {\n  const xrayPropagator = new AWSXRayPropagator();\n  const TRACE_ID = \"8a3c60f7d188f8fa79d48a391a778fa6\";\n  const SPAN_ID = \"53995c3f42cd8ad8\";\n  const SAMPLED_TRACE_FLAG = TraceFlags.SAMPLED;\n  const NOT_SAMPLED_TRACE_FLAG = TraceFlags.NONE;\n\n  let carrier: { [key: string]: unknown };\n\n  beforeEach(() => {\n    carrier = {};\n  });\n\n  describe('.inject()', () => {\n    it('inject sampled context', () => {\n      const spanContext: SpanContext = {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        traceFlags: SAMPLED_TRACE_FLAG,\n      }\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n      assert.deepStrictEqual(\n        carrier[AWSXRAY_TRACE_ID_HEADER],\n        \"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1\"\n      )\n    });\n\n    it('inject not sampled context', () => {\n      const spanContext: SpanContext = {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        traceFlags: NOT_SAMPLED_TRACE_FLAG,\n      }\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n      assert.deepStrictEqual(\n        carrier[AWSXRAY_TRACE_ID_HEADER],\n        \"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=0\"\n      )\n    });\n\n    it (\"inject with TraceState\", () => {\n      const traceState = new TraceState();\n      traceState.set(\"foo\",\"bar\");\n      const spanContext: SpanContext = {\n        traceId: TRACE_ID,\n        spanId: SPAN_ID,\n        traceFlags: SAMPLED_TRACE_FLAG,\n        traceState: traceState,\n      }\n      xrayPropagator.inject(\n        setExtractedSpanContext(Context.ROOT_CONTEXT, spanContext),\n        carrier,\n        defaultSetter\n      );\n\n      // TODO: assert trace state when the propagator supports it\n      assert.deepStrictEqual(\n        carrier[AWSXRAY_TRACE_ID_HEADER],\n        \"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1\"\n      )\n    });\n  });\n\n  describe('.extract()', () => {\n    it('extract nothing from context', () => {\n      // context remains untouched\n      assert.deepStrictEqual(xrayPropagator.extract(\n        Context.ROOT_CONTEXT,\n        carrier,\n        defaultGetter\n        ), Context.ROOT_CONTEXT);\n    });\n\n    it('extract sampled context', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1';\n\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n      assert.deepStrictEqual(extractedSpanContext, {\n          traceId: TRACE_ID,\n          spanId: SPAN_ID,\n          isRemote: true,\n          traceFlags: TraceFlags.SAMPLED,\n        });\n    });\n\n    it('extract sampled context with arbitrary order', () => {\n      carrier[AWSXRAY_TRACE_ID_HEADER] = \n        'Parent=53995c3f42cd8ad8;Sampled=1;Root=1-8a3c60f7-d188f8fa79d48a391a778fa6';\n\n      const extractedSpanContext = getExtractedSpanContext(\n        xrayPropagator.extract(\n          Context.ROOT_CONTEXT,\n          carrier,\n          defaultGetter,\n      ));\n      assert.deepStrictEqual(extractedSpanContext, {\n          traceId: TRACE_ID,\n          spanId: SPAN_ID,\n          isRemote: true,\n          traceFlags: TraceFlags.SAMPLED,\n        });\n    });\n  });\n    \n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a22309b2af1740d9e343cfa36094a45fc6b2f6fb"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_rojiwxhoe=function(){return actualCoverage;};}return actualCoverage;}cov_rojiwxhoe();cov_rojiwxhoe().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const api_1=(cov_rojiwxhoe().s[1]++,require("@opentelemetry/api"));const core_1=(cov_rojiwxhoe().s[2]++,require("@opentelemetry/core"));const assert=(cov_rojiwxhoe().s[3]++,require("assert"));const AWSXRayPropagator_1=(cov_rojiwxhoe().s[4]++,require("../src/AWSXRayPropagator"));cov_rojiwxhoe().s[5]++;describe('AWSXRayPropagator',()=>{cov_rojiwxhoe().f[0]++;const xrayPropagator=(cov_rojiwxhoe().s[6]++,new AWSXRayPropagator_1.AWSXRayPropagator());const TRACE_ID=(cov_rojiwxhoe().s[7]++,"8a3c60f7d188f8fa79d48a391a778fa6");const SPAN_ID=(cov_rojiwxhoe().s[8]++,"53995c3f42cd8ad8");const SAMPLED_TRACE_FLAG=(cov_rojiwxhoe().s[9]++,api_1.TraceFlags.SAMPLED);const NOT_SAMPLED_TRACE_FLAG=(cov_rojiwxhoe().s[10]++,api_1.TraceFlags.NONE);let carrier;cov_rojiwxhoe().s[11]++;beforeEach(()=>{cov_rojiwxhoe().f[1]++;cov_rojiwxhoe().s[12]++;carrier={};});cov_rojiwxhoe().s[13]++;describe('.inject()',()=>{cov_rojiwxhoe().f[2]++;cov_rojiwxhoe().s[14]++;it('inject sampled context',()=>{cov_rojiwxhoe().f[3]++;const spanContext=(cov_rojiwxhoe().s[15]++,{traceId:TRACE_ID,spanId:SPAN_ID,traceFlags:SAMPLED_TRACE_FLAG});cov_rojiwxhoe().s[16]++;xrayPropagator.inject(core_1.setExtractedSpanContext(api_1.Context.ROOT_CONTEXT,spanContext),carrier,api_1.defaultSetter);cov_rojiwxhoe().s[17]++;assert.deepStrictEqual(carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER],"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1");});cov_rojiwxhoe().s[18]++;it('inject not sampled context',()=>{cov_rojiwxhoe().f[4]++;const spanContext=(cov_rojiwxhoe().s[19]++,{traceId:TRACE_ID,spanId:SPAN_ID,traceFlags:NOT_SAMPLED_TRACE_FLAG});cov_rojiwxhoe().s[20]++;xrayPropagator.inject(core_1.setExtractedSpanContext(api_1.Context.ROOT_CONTEXT,spanContext),carrier,api_1.defaultSetter);cov_rojiwxhoe().s[21]++;assert.deepStrictEqual(carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER],"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=0");});cov_rojiwxhoe().s[22]++;it("inject with TraceState",()=>{cov_rojiwxhoe().f[5]++;const traceState=(cov_rojiwxhoe().s[23]++,new core_1.TraceState());cov_rojiwxhoe().s[24]++;traceState.set("foo","bar");const spanContext=(cov_rojiwxhoe().s[25]++,{traceId:TRACE_ID,spanId:SPAN_ID,traceFlags:SAMPLED_TRACE_FLAG,traceState:traceState});cov_rojiwxhoe().s[26]++;xrayPropagator.inject(core_1.setExtractedSpanContext(api_1.Context.ROOT_CONTEXT,spanContext),carrier,api_1.defaultSetter);// TODO: assert trace state when the propagator supports it
cov_rojiwxhoe().s[27]++;assert.deepStrictEqual(carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER],"Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1");});});cov_rojiwxhoe().s[28]++;describe('.extract()',()=>{cov_rojiwxhoe().f[6]++;cov_rojiwxhoe().s[29]++;it('extract nothing from context',()=>{cov_rojiwxhoe().f[7]++;cov_rojiwxhoe().s[30]++;// context remains untouched
assert.deepStrictEqual(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter),api_1.Context.ROOT_CONTEXT);});cov_rojiwxhoe().s[31]++;it('extract sampled context',()=>{cov_rojiwxhoe().f[8]++;cov_rojiwxhoe().s[32]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=53995c3f42cd8ad8;Sampled=1';const extractedSpanContext=(cov_rojiwxhoe().s[33]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[34]++;assert.deepStrictEqual(extractedSpanContext,{traceId:TRACE_ID,spanId:SPAN_ID,isRemote:true,traceFlags:api_1.TraceFlags.SAMPLED});});cov_rojiwxhoe().s[35]++;it('extract sampled context with arbitrary order',()=>{cov_rojiwxhoe().f[9]++;cov_rojiwxhoe().s[36]++;carrier[AWSXRayPropagator_1.AWSXRAY_TRACE_ID_HEADER]='Parent=53995c3f42cd8ad8;Sampled=1;Root=1-8a3c60f7-d188f8fa79d48a391a778fa6';const extractedSpanContext=(cov_rojiwxhoe().s[37]++,core_1.getExtractedSpanContext(xrayPropagator.extract(api_1.Context.ROOT_CONTEXT,carrier,api_1.defaultGetter)));cov_rojiwxhoe().s[38]++;assert.deepStrictEqual(extractedSpanContext,{traceId:TRACE_ID,spanId:SPAN_ID,isRemote:true,traceFlags:api_1.TraceFlags.SAMPLED});});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,