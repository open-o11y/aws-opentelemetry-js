"use strict";/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_14ftmralbh(){var path="/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/src/AWSXRayPropagator.ts";var hash="15db4f1a208e24e8726658c3ae48cd56e7dc8268";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/src/AWSXRayPropagator.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:69}},"2":{start:{line:19,column:14},end:{line:19,column:43}},"3":{start:{line:20,column:15},end:{line:20,column:45}},"4":{start:{line:21,column:0},end:{line:21,column:52}},"5":{start:{line:22,column:31},end:{line:22,column:34}},"6":{start:{line:23,column:21},end:{line:23,column:24}},"7":{start:{line:24,column:21},end:{line:24,column:27}},"8":{start:{line:25,column:24},end:{line:25,column:26}},"9":{start:{line:26,column:25},end:{line:26,column:28}},"10":{start:{line:27,column:27},end:{line:27,column:30}},"11":{start:{line:28,column:35},end:{line:28,column:36}},"12":{start:{line:29,column:35},end:{line:29,column:37}},"13":{start:{line:30,column:35},end:{line:30,column:36}},"14":{start:{line:31,column:22},end:{line:31,column:30}},"15":{start:{line:32,column:25},end:{line:32,column:27}},"16":{start:{line:33,column:25},end:{line:33,column:34}},"17":{start:{line:34,column:28},end:{line:34,column:29}},"18":{start:{line:35,column:19},end:{line:35,column:22}},"19":{start:{line:36,column:20},end:{line:36,column:23}},"20":{start:{line:47,column:28},end:{line:47,column:64}},"21":{start:{line:48,column:8},end:{line:49,column:19}},"22":{start:{line:49,column:12},end:{line:49,column:19}},"23":{start:{line:50,column:26},end:{line:50,column:45}},"24":{start:{line:51,column:28},end:{line:55,column:61}},"25":{start:{line:56,column:25},end:{line:56,column:43}},"26":{start:{line:57,column:29},end:{line:57,column:78}},"27":{start:{line:59,column:28},end:{line:69,column:26}},"28":{start:{line:70,column:8},end:{line:70,column:70}},"29":{start:{line:73,column:28},end:{line:73,column:74}},"30":{start:{line:74,column:8},end:{line:75,column:72}},"31":{start:{line:75,column:12},end:{line:75,column:72}},"32":{start:{line:76,column:8},end:{line:76,column:68}},"33":{start:{line:79,column:28},end:{line:79,column:76}},"34":{start:{line:82,column:8},end:{line:83,column:84}},"35":{start:{line:83,column:12},end:{line:83,column:84}},"36":{start:{line:84,column:18},end:{line:84,column:19}},"37":{start:{line:85,column:28},end:{line:85,column:50}},"38":{start:{line:86,column:27},end:{line:86,column:48}},"39":{start:{line:87,column:31},end:{line:87,column:35}},"40":{start:{line:88,column:8},end:{line:114,column:9}},"41":{start:{line:89,column:35},end:{line:89,column:83}},"42":{start:{line:90,column:12},end:{line:98,column:13}},"43":{start:{line:91,column:16},end:{line:91,column:80}},"44":{start:{line:92,column:16},end:{line:92,column:41}},"45":{start:{line:96,column:16},end:{line:96,column:64}},"46":{start:{line:97,column:16},end:{line:97,column:41}},"47":{start:{line:99,column:32},end:{line:99,column:65}},"48":{start:{line:100,column:12},end:{line:103,column:13}},"49":{start:{line:102,column:16},end:{line:102,column:88}},"50":{start:{line:104,column:26},end:{line:104,column:60}},"51":{start:{line:105,column:12},end:{line:107,column:13}},"52":{start:{line:106,column:16},end:{line:106,column:58}},"53":{start:{line:108,column:12},end:{line:110,column:13}},"54":{start:{line:109,column:16},end:{line:109,column:56}},"55":{start:{line:111,column:12},end:{line:113,column:13}},"56":{start:{line:112,column:16},end:{line:112,column:63}},"57":{start:{line:115,column:8},end:{line:118,column:9}},"58":{start:{line:117,column:12},end:{line:117,column:84}},"59":{start:{line:119,column:34},end:{line:124,column:9}},"60":{start:{line:125,column:8},end:{line:133,column:9}},"61":{start:{line:127,column:12},end:{line:129,column:13}},"62":{start:{line:128,column:16},end:{line:128,column:41}},"63":{start:{line:134,column:8},end:{line:134,column:33}},"64":{start:{line:137,column:8},end:{line:140,column:9}},"65":{start:{line:139,column:12},end:{line:139,column:31}},"66":{start:{line:142,column:8},end:{line:145,column:9}},"67":{start:{line:144,column:12},end:{line:144,column:23}},"68":{start:{line:147,column:8},end:{line:151,column:9}},"69":{start:{line:150,column:12},end:{line:150,column:23}},"70":{start:{line:152,column:26},end:{line:152,column:107}},"71":{start:{line:153,column:27},end:{line:153,column:97}},"72":{start:{line:154,column:8},end:{line:154,column:38}},"73":{start:{line:157,column:8},end:{line:157,column:97}},"74":{start:{line:160,column:8},end:{line:168,column:9}},"75":{start:{line:161,column:12},end:{line:161,column:41}},"76":{start:{line:163,column:13},end:{line:168,column:9}},"77":{start:{line:164,column:12},end:{line:164,column:44}},"78":{start:{line:167,column:12},end:{line:167,column:24}},"79":{start:{line:171,column:0},end:{line:171,column:46}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:37},end:{line:71,column:5}},line:46},"1":{name:"(anonymous_1)",decl:{start:{line:72,column:4},end:{line:72,column:5}},loc:{start:{line:72,column:38},end:{line:77,column:5}},line:72},"2":{name:"(anonymous_2)",decl:{start:{line:78,column:4},end:{line:78,column:5}},loc:{start:{line:78,column:46},end:{line:135,column:5}},line:78},"3":{name:"(anonymous_3)",decl:{start:{line:136,column:4},end:{line:136,column:5}},loc:{start:{line:136,column:31},end:{line:155,column:5}},line:136},"4":{name:"(anonymous_4)",decl:{start:{line:156,column:4},end:{line:156,column:5}},loc:{start:{line:156,column:31},end:{line:158,column:5}},line:156},"5":{name:"(anonymous_5)",decl:{start:{line:159,column:4},end:{line:159,column:5}},loc:{start:{line:159,column:37},end:{line:169,column:5}},line:159}},branchMap:{"0":{loc:{start:{line:48,column:8},end:{line:49,column:19}},type:"if",locations:[{start:{line:48,column:8},end:{line:49,column:19}},{start:{line:48,column:8},end:{line:49,column:19}}],line:48},"1":{loc:{start:{line:57,column:29},end:{line:57,column:78}},type:"cond-expr",locations:[{start:{line:57,column:54},end:{line:57,column:64}},{start:{line:57,column:67},end:{line:57,column:78}}],line:57},"2":{loc:{start:{line:74,column:8},end:{line:75,column:72}},type:"if",locations:[{start:{line:74,column:8},end:{line:75,column:72}},{start:{line:74,column:8},end:{line:75,column:72}}],line:74},"3":{loc:{start:{line:82,column:8},end:{line:83,column:84}},type:"if",locations:[{start:{line:82,column:8},end:{line:83,column:84}},{start:{line:82,column:8},end:{line:83,column:84}}],line:82},"4":{loc:{start:{line:82,column:12},end:{line:82,column:59}},type:"binary-expr",locations:[{start:{line:82,column:12},end:{line:82,column:24}},{start:{line:82,column:28},end:{line:82,column:59}}],line:82},"5":{loc:{start:{line:90,column:12},end:{line:98,column:13}},type:"if",locations:[{start:{line:90,column:12},end:{line:98,column:13}},{start:{line:90,column:12},end:{line:98,column:13}}],line:90},"6":{loc:{start:{line:100,column:12},end:{line:103,column:13}},type:"if",locations:[{start:{line:100,column:12},end:{line:103,column:13}},{start:{line:100,column:12},end:{line:103,column:13}}],line:100},"7":{loc:{start:{line:105,column:12},end:{line:107,column:13}},type:"if",locations:[{start:{line:105,column:12},end:{line:107,column:13}},{start:{line:105,column:12},end:{line:107,column:13}}],line:105},"8":{loc:{start:{line:108,column:12},end:{line:110,column:13}},type:"if",locations:[{start:{line:108,column:12},end:{line:110,column:13}},{start:{line:108,column:12},end:{line:110,column:13}}],line:108},"9":{loc:{start:{line:111,column:12},end:{line:113,column:13}},type:"if",locations:[{start:{line:111,column:12},end:{line:113,column:13}},{start:{line:111,column:12},end:{line:113,column:13}}],line:111},"10":{loc:{start:{line:115,column:8},end:{line:118,column:9}},type:"if",locations:[{start:{line:115,column:8},end:{line:118,column:9}},{start:{line:115,column:8},end:{line:118,column:9}}],line:115},"11":{loc:{start:{line:125,column:8},end:{line:133,column:9}},type:"if",locations:[{start:{line:125,column:8},end:{line:133,column:9}},{start:{line:125,column:8},end:{line:133,column:9}}],line:125},"12":{loc:{start:{line:127,column:12},end:{line:129,column:13}},type:"if",locations:[{start:{line:127,column:12},end:{line:129,column:13}},{start:{line:127,column:12},end:{line:129,column:13}}],line:127},"13":{loc:{start:{line:137,column:8},end:{line:140,column:9}},type:"if",locations:[{start:{line:137,column:8},end:{line:140,column:9}},{start:{line:137,column:8},end:{line:140,column:9}}],line:137},"14":{loc:{start:{line:142,column:8},end:{line:145,column:9}},type:"if",locations:[{start:{line:142,column:8},end:{line:145,column:9}},{start:{line:142,column:8},end:{line:145,column:9}}],line:142},"15":{loc:{start:{line:147,column:8},end:{line:151,column:9}},type:"if",locations:[{start:{line:147,column:8},end:{line:151,column:9}},{start:{line:147,column:8},end:{line:151,column:9}}],line:147},"16":{loc:{start:{line:147,column:12},end:{line:148,column:84}},type:"binary-expr",locations:[{start:{line:147,column:12},end:{line:147,column:81}},{start:{line:148,column:15},end:{line:148,column:84}}],line:147},"17":{loc:{start:{line:157,column:15},end:{line:157,column:96}},type:"cond-expr",locations:[{start:{line:157,column:60},end:{line:157,column:72}},{start:{line:157,column:75},end:{line:157,column:96}}],line:157},"18":{loc:{start:{line:160,column:8},end:{line:168,column:9}},type:"if",locations:[{start:{line:160,column:8},end:{line:168,column:9}},{start:{line:160,column:8},end:{line:168,column:9}}],line:160},"19":{loc:{start:{line:160,column:12},end:{line:160,column:93}},type:"binary-expr",locations:[{start:{line:160,column:12},end:{line:160,column:58}},{start:{line:160,column:62},end:{line:160,column:93}}],line:160},"20":{loc:{start:{line:163,column:13},end:{line:168,column:9}},type:"if",locations:[{start:{line:163,column:13},end:{line:168,column:9}},{start:{line:163,column:13},end:{line:168,column:9}}],line:163}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},inputSourceMap:{version:3,file:"/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/src/AWSXRayPropagator.ts",sources:["/Users/zocong/Documents/forked/opentelemetry-js-contrib/propagators/opentelemetry-propagator-aws-xray/src/AWSXRayPropagator.ts"],names:[],mappings:"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",sourcesContent:["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  HttpTextPropagator,\n  SpanContext,\n  TraceFlags,\n  SetterFunction,\n  GetterFunction,\n  INVALID_TRACE_ID,\n  INVALID_SPAN_ID,\n} from '@opentelemetry/api';\nimport {\n  getParentSpanContext,\n  setExtractedSpanContext,\n  INVALID_SPAN_CONTEXT,\n  isValid,\n} from '@opentelemetry/core';\n\nexport const AWSXRAY_TRACE_ID_HEADER = 'X-Amzn-Trace-Id';\n\nconst TRACE_HEADER_DELIMITER = ';';\nconst KV_DELIMITER = '=';\n\nconst TRACE_ID_KEY = 'Root';\nconst TRACE_ID_LENGTH = 35;\nconst TRACE_ID_VERSION = \"1\";\nconst TRACE_ID_DELIMITER = '-';\nconst TRACE_ID_DELIMITER_INDEX_1 = 1;\nconst TRACE_ID_DELIMITER_INDEX_2 = 10;\nconst TRACE_ID_FIRST_PART_LENGTH = 8;\n\nconst PARENT_ID_KEY = 'Parent';\nconst PARENT_ID_LENGTH = 16;\n\nconst SAMPLED_FLAG_KEY = 'Sampled';\nconst SAMPLED_FLAG_LENGTH = 1;\nconst IS_SAMPLED = '1';\nconst NOT_SAMPLED = '0';\n/**\n * Implementation of the AWS X-Ray Trace Header propagation protocol. See <a href=\n * https://https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader>AWS\n * Tracing header spec</a>\n * \n * An example AWS Xray Tracing Header is shown below:\n * X-Amzn-Trace-Id: Root=1-5759e988-bd862e3fe1be46a994272793;Parent=53995c3f42cd8ad8;Sampled=1\n */\nexport class AWSXRayPropagator implements HttpTextPropagator {\n  inject(context: Context, carrier: unknown, setter: SetterFunction) {\n    const spanContext = getParentSpanContext(context);\n    if (!spanContext) return;\n\n    const otTraceId = spanContext.traceId;\n    const xrayTraceId = TRACE_ID_VERSION\n      + TRACE_ID_DELIMITER\n      + otTraceId.substring(0, TRACE_ID_FIRST_PART_LENGTH)\n      + TRACE_ID_DELIMITER\n      + otTraceId.substring(TRACE_ID_FIRST_PART_LENGTH);\n    const parentId = spanContext.spanId;\n    const samplingFlag = spanContext.traceFlags? IS_SAMPLED: NOT_SAMPLED;\n    // TODO: Add OT trace state to the X-Ray trace header\n\n    const traceHeader = TRACE_ID_KEY\n      + KV_DELIMITER\n      + xrayTraceId\n      + TRACE_HEADER_DELIMITER\n      + PARENT_ID_KEY\n      + KV_DELIMITER\n      + parentId\n      + TRACE_HEADER_DELIMITER\n      + SAMPLED_FLAG_KEY\n      + KV_DELIMITER\n      + samplingFlag;\n\n    setter(\n      carrier,\n      AWSXRAY_TRACE_ID_HEADER,\n      traceHeader\n    );\n  }\n\n  extract(context: Context, carrier: unknown, getter: GetterFunction): Context {\n    const spanContext = this.getSpanContextFromHeader(carrier, getter);\n    if (!isValid(spanContext)) return setExtractedSpanContext(context, spanContext);\n\n    return setExtractedSpanContext(context, spanContext);\n  }\n  \n  private getSpanContextFromHeader(carrier: unknown, getter: GetterFunction): SpanContext {\n    const traceHeader = getter(carrier, AWSXRAY_TRACE_ID_HEADER);\n    // Only if the returned traceHeader is no empty string can be extracted\n    // if (!traceHeader || typeof traceHeader !== 'string') return INVALID_SPAN_CONTEXT;\n    if (!traceHeader || typeof traceHeader !== 'string') return {traceId: \"1\", spanId: \"0\", traceFlags: TraceFlags.NONE};\n\n    let pos = 0, trimmedPart: string;\n    let parsedTraceId = INVALID_TRACE_ID;\n    let parsedSpanId = INVALID_SPAN_ID;\n    let parsedTraceFlags = null;\n    while(pos < traceHeader.length) {\n      const delimiterIndex = traceHeader.indexOf(TRACE_HEADER_DELIMITER, pos);\n      if (delimiterIndex >= 0) {\n        trimmedPart = traceHeader.substring(pos, delimiterIndex).trim();\n        pos = delimiterIndex + 1;\n      } else {\n        //last part\n        trimmedPart = traceHeader.substring(pos).trim();\n        pos = traceHeader.length;\n      }\n      const equalsIndex = trimmedPart.indexOf(KV_DELIMITER);\n      if (equalsIndex < 0) {\n        // return INVALID_SPAN_CONTEXT;\n        return {traceId: \"2\", spanId: \"0\", traceFlags: TraceFlags.NONE}\n      }\n\n      const value = trimmedPart.substring(equalsIndex);\n\n      if (trimmedPart.startsWith(TRACE_ID_KEY)) {\n        parsedTraceId = this._parseTraceId(value);\n      }\n      if (trimmedPart.startsWith(PARENT_ID_KEY)) {\n        parsedSpanId = this._parseSpanId(value);\n      }\n      if (trimmedPart.startsWith(SAMPLED_FLAG_KEY)) {\n        parsedTraceFlags = this._parseTraceFlag(value);\n      }\n    }\n    if (parsedTraceFlags === null) {\n      // return INVALID_SPAN_CONTEXT;\n      return {traceId: \"3\", spanId: \"0\", traceFlags: TraceFlags.NONE}\n    }\n    const resultSpanContext: SpanContext = {\n      traceId: parsedTraceId,\n      spanId: parsedSpanId,\n      traceFlags: parsedTraceFlags,\n      isRemote: true,\n    }\n    if (!isValid(resultSpanContext)) {\n      // return INVALID_SPAN_CONTEXT;\n      if (resultSpanContext.traceId === INVALID_TRACE_ID) {\n        return resultSpanContext;\n      }\n      // if (resultSpanContext.spanId === INVALID_SPAN_ID) {\n      //   return {traceId: \"5\", spanId: \"0\", traceFlags: TraceFlags.NONE}\n      // }\n    }\n    return resultSpanContext;\n  }\n\n  private _parseTraceId(xrayTraceId: string): string {\n    if (xrayTraceId.length !== TRACE_ID_LENGTH) {\n      // return INVALID_TRACE_ID;\n      return xrayTraceId;\n    }\n\n    // Chcek version trace id version\n    if (!xrayTraceId.startsWith(TRACE_ID_VERSION)) {\n      // return INVALID_TRACE_ID;\n      return '6';\n    }\n\n    // Check delimiters\n    if (xrayTraceId.charAt(TRACE_ID_DELIMITER_INDEX_1) !== TRACE_ID_DELIMITER\n    || xrayTraceId.charAt(TRACE_ID_DELIMITER_INDEX_2) !== TRACE_ID_DELIMITER) {\n      // return INVALID_TRACE_ID;\n      return '7';\n    }\n\n    const epochPart = xrayTraceId.substring(TRACE_ID_DELIMITER_INDEX_1 + 1, TRACE_ID_DELIMITER_INDEX_2);\n    const uniquePart = xrayTraceId.substring(TRACE_ID_DELIMITER_INDEX_2 + 1, TRACE_ID_LENGTH);\n\n    return epochPart + uniquePart;\n  }\n\n  private _parseSpanId(xrayParentId: string): string{\n    return (xrayParentId.length === PARENT_ID_LENGTH)? xrayParentId: INVALID_SPAN_ID;\n  }\n\n  private _parseTraceFlag(xraySampledFlag: string): TraceFlags | null {\n    if (xraySampledFlag.length !== SAMPLED_FLAG_LENGTH || xraySampledFlag === NOT_SAMPLED) {\n      return TraceFlags.NONE;\n    } else if (xraySampledFlag === IS_SAMPLED) {\n      return TraceFlags.SAMPLED;\n    } else {\n      return null;\n    }\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"15db4f1a208e24e8726658c3ae48cd56e7dc8268"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_14ftmralbh=function(){return actualCoverage;};}return actualCoverage;}cov_14ftmralbh();cov_14ftmralbh().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_14ftmralbh().s[1]++;exports.AWSXRayPropagator=exports.AWSXRAY_TRACE_ID_HEADER=void 0;const api_1=(cov_14ftmralbh().s[2]++,require("@opentelemetry/api"));const core_1=(cov_14ftmralbh().s[3]++,require("@opentelemetry/core"));cov_14ftmralbh().s[4]++;exports.AWSXRAY_TRACE_ID_HEADER='X-Amzn-Trace-Id';const TRACE_HEADER_DELIMITER=(cov_14ftmralbh().s[5]++,';');const KV_DELIMITER=(cov_14ftmralbh().s[6]++,'=');const TRACE_ID_KEY=(cov_14ftmralbh().s[7]++,'Root');const TRACE_ID_LENGTH=(cov_14ftmralbh().s[8]++,35);const TRACE_ID_VERSION=(cov_14ftmralbh().s[9]++,"1");const TRACE_ID_DELIMITER=(cov_14ftmralbh().s[10]++,'-');const TRACE_ID_DELIMITER_INDEX_1=(cov_14ftmralbh().s[11]++,1);const TRACE_ID_DELIMITER_INDEX_2=(cov_14ftmralbh().s[12]++,10);const TRACE_ID_FIRST_PART_LENGTH=(cov_14ftmralbh().s[13]++,8);const PARENT_ID_KEY=(cov_14ftmralbh().s[14]++,'Parent');const PARENT_ID_LENGTH=(cov_14ftmralbh().s[15]++,16);const SAMPLED_FLAG_KEY=(cov_14ftmralbh().s[16]++,'Sampled');const SAMPLED_FLAG_LENGTH=(cov_14ftmralbh().s[17]++,1);const IS_SAMPLED=(cov_14ftmralbh().s[18]++,'1');const NOT_SAMPLED=(cov_14ftmralbh().s[19]++,'0');/**
 * Implementation of the AWS X-Ray Trace Header propagation protocol. See <a href=
 * https://https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader>AWS
 * Tracing header spec</a>
 *
 * An example AWS Xray Tracing Header is shown below:
 * X-Amzn-Trace-Id: Root=1-5759e988-bd862e3fe1be46a994272793;Parent=53995c3f42cd8ad8;Sampled=1
 */class AWSXRayPropagator{inject(context,carrier,setter){cov_14ftmralbh().f[0]++;const spanContext=(cov_14ftmralbh().s[20]++,core_1.getParentSpanContext(context));cov_14ftmralbh().s[21]++;if(!spanContext){cov_14ftmralbh().b[0][0]++;cov_14ftmralbh().s[22]++;return;}else{cov_14ftmralbh().b[0][1]++;}const otTraceId=(cov_14ftmralbh().s[23]++,spanContext.traceId);const xrayTraceId=(cov_14ftmralbh().s[24]++,TRACE_ID_VERSION+TRACE_ID_DELIMITER+otTraceId.substring(0,TRACE_ID_FIRST_PART_LENGTH)+TRACE_ID_DELIMITER+otTraceId.substring(TRACE_ID_FIRST_PART_LENGTH));const parentId=(cov_14ftmralbh().s[25]++,spanContext.spanId);const samplingFlag=(cov_14ftmralbh().s[26]++,spanContext.traceFlags?(cov_14ftmralbh().b[1][0]++,IS_SAMPLED):(cov_14ftmralbh().b[1][1]++,NOT_SAMPLED));// TODO: Add OT trace state to the X-Ray trace header
const traceHeader=(cov_14ftmralbh().s[27]++,TRACE_ID_KEY+KV_DELIMITER+xrayTraceId+TRACE_HEADER_DELIMITER+PARENT_ID_KEY+KV_DELIMITER+parentId+TRACE_HEADER_DELIMITER+SAMPLED_FLAG_KEY+KV_DELIMITER+samplingFlag);cov_14ftmralbh().s[28]++;setter(carrier,exports.AWSXRAY_TRACE_ID_HEADER,traceHeader);}extract(context,carrier,getter){cov_14ftmralbh().f[1]++;const spanContext=(cov_14ftmralbh().s[29]++,this.getSpanContextFromHeader(carrier,getter));cov_14ftmralbh().s[30]++;if(!core_1.isValid(spanContext)){cov_14ftmralbh().b[2][0]++;cov_14ftmralbh().s[31]++;return core_1.setExtractedSpanContext(context,spanContext);}else{cov_14ftmralbh().b[2][1]++;}cov_14ftmralbh().s[32]++;return core_1.setExtractedSpanContext(context,spanContext);}getSpanContextFromHeader(carrier,getter){cov_14ftmralbh().f[2]++;const traceHeader=(cov_14ftmralbh().s[33]++,getter(carrier,exports.AWSXRAY_TRACE_ID_HEADER));// Only if the returned traceHeader is no empty string can be extracted
// if (!traceHeader || typeof traceHeader !== 'string') return INVALID_SPAN_CONTEXT;
cov_14ftmralbh().s[34]++;if((cov_14ftmralbh().b[4][0]++,!traceHeader)||(cov_14ftmralbh().b[4][1]++,typeof traceHeader!=='string')){cov_14ftmralbh().b[3][0]++;cov_14ftmralbh().s[35]++;return{traceId:"1",spanId:"0",traceFlags:api_1.TraceFlags.NONE};}else{cov_14ftmralbh().b[3][1]++;}let pos=(cov_14ftmralbh().s[36]++,0),trimmedPart;let parsedTraceId=(cov_14ftmralbh().s[37]++,api_1.INVALID_TRACE_ID);let parsedSpanId=(cov_14ftmralbh().s[38]++,api_1.INVALID_SPAN_ID);let parsedTraceFlags=(cov_14ftmralbh().s[39]++,null);cov_14ftmralbh().s[40]++;while(pos<traceHeader.length){const delimiterIndex=(cov_14ftmralbh().s[41]++,traceHeader.indexOf(TRACE_HEADER_DELIMITER,pos));cov_14ftmralbh().s[42]++;if(delimiterIndex>=0){cov_14ftmralbh().b[5][0]++;cov_14ftmralbh().s[43]++;trimmedPart=traceHeader.substring(pos,delimiterIndex).trim();cov_14ftmralbh().s[44]++;pos=delimiterIndex+1;}else{cov_14ftmralbh().b[5][1]++;cov_14ftmralbh().s[45]++;//last part
trimmedPart=traceHeader.substring(pos).trim();cov_14ftmralbh().s[46]++;pos=traceHeader.length;}const equalsIndex=(cov_14ftmralbh().s[47]++,trimmedPart.indexOf(KV_DELIMITER));cov_14ftmralbh().s[48]++;if(equalsIndex<0){cov_14ftmralbh().b[6][0]++;cov_14ftmralbh().s[49]++;// return INVALID_SPAN_CONTEXT;
return{traceId:"2",spanId:"0",traceFlags:api_1.TraceFlags.NONE};}else{cov_14ftmralbh().b[6][1]++;}const value=(cov_14ftmralbh().s[50]++,trimmedPart.substring(equalsIndex));cov_14ftmralbh().s[51]++;if(trimmedPart.startsWith(TRACE_ID_KEY)){cov_14ftmralbh().b[7][0]++;cov_14ftmralbh().s[52]++;parsedTraceId=this._parseTraceId(value);}else{cov_14ftmralbh().b[7][1]++;}cov_14ftmralbh().s[53]++;if(trimmedPart.startsWith(PARENT_ID_KEY)){cov_14ftmralbh().b[8][0]++;cov_14ftmralbh().s[54]++;parsedSpanId=this._parseSpanId(value);}else{cov_14ftmralbh().b[8][1]++;}cov_14ftmralbh().s[55]++;if(trimmedPart.startsWith(SAMPLED_FLAG_KEY)){cov_14ftmralbh().b[9][0]++;cov_14ftmralbh().s[56]++;parsedTraceFlags=this._parseTraceFlag(value);}else{cov_14ftmralbh().b[9][1]++;}}cov_14ftmralbh().s[57]++;if(parsedTraceFlags===null){cov_14ftmralbh().b[10][0]++;cov_14ftmralbh().s[58]++;// return INVALID_SPAN_CONTEXT;
return{traceId:"3",spanId:"0",traceFlags:api_1.TraceFlags.NONE};}else{cov_14ftmralbh().b[10][1]++;}const resultSpanContext=(cov_14ftmralbh().s[59]++,{traceId:parsedTraceId,spanId:parsedSpanId,traceFlags:parsedTraceFlags,isRemote:true});cov_14ftmralbh().s[60]++;if(!core_1.isValid(resultSpanContext)){cov_14ftmralbh().b[11][0]++;cov_14ftmralbh().s[61]++;// return INVALID_SPAN_CONTEXT;
if(resultSpanContext.traceId===api_1.INVALID_TRACE_ID){cov_14ftmralbh().b[12][0]++;cov_14ftmralbh().s[62]++;return resultSpanContext;}else{cov_14ftmralbh().b[12][1]++;}// if (resultSpanContext.spanId === INVALID_SPAN_ID) {
//   return {traceId: "5", spanId: "0", traceFlags: TraceFlags.NONE}
// }
}else{cov_14ftmralbh().b[11][1]++;}cov_14ftmralbh().s[63]++;return resultSpanContext;}_parseTraceId(xrayTraceId){cov_14ftmralbh().f[3]++;cov_14ftmralbh().s[64]++;if(xrayTraceId.length!==TRACE_ID_LENGTH){cov_14ftmralbh().b[13][0]++;cov_14ftmralbh().s[65]++;// return INVALID_TRACE_ID;
return xrayTraceId;}else{cov_14ftmralbh().b[13][1]++;}// Chcek version trace id version
cov_14ftmralbh().s[66]++;if(!xrayTraceId.startsWith(TRACE_ID_VERSION)){cov_14ftmralbh().b[14][0]++;cov_14ftmralbh().s[67]++;// return INVALID_TRACE_ID;
return'6';}else{cov_14ftmralbh().b[14][1]++;}// Check delimiters
cov_14ftmralbh().s[68]++;if((cov_14ftmralbh().b[16][0]++,xrayTraceId.charAt(TRACE_ID_DELIMITER_INDEX_1)!==TRACE_ID_DELIMITER)||(cov_14ftmralbh().b[16][1]++,xrayTraceId.charAt(TRACE_ID_DELIMITER_INDEX_2)!==TRACE_ID_DELIMITER)){cov_14ftmralbh().b[15][0]++;cov_14ftmralbh().s[69]++;// return INVALID_TRACE_ID;
return'7';}else{cov_14ftmralbh().b[15][1]++;}const epochPart=(cov_14ftmralbh().s[70]++,xrayTraceId.substring(TRACE_ID_DELIMITER_INDEX_1+1,TRACE_ID_DELIMITER_INDEX_2));const uniquePart=(cov_14ftmralbh().s[71]++,xrayTraceId.substring(TRACE_ID_DELIMITER_INDEX_2+1,TRACE_ID_LENGTH));cov_14ftmralbh().s[72]++;return epochPart+uniquePart;}_parseSpanId(xrayParentId){cov_14ftmralbh().f[4]++;cov_14ftmralbh().s[73]++;return xrayParentId.length===PARENT_ID_LENGTH?(cov_14ftmralbh().b[17][0]++,xrayParentId):(cov_14ftmralbh().b[17][1]++,api_1.INVALID_SPAN_ID);}_parseTraceFlag(xraySampledFlag){cov_14ftmralbh().f[5]++;cov_14ftmralbh().s[74]++;if((cov_14ftmralbh().b[19][0]++,xraySampledFlag.length!==SAMPLED_FLAG_LENGTH)||(cov_14ftmralbh().b[19][1]++,xraySampledFlag===NOT_SAMPLED)){cov_14ftmralbh().b[18][0]++;cov_14ftmralbh().s[75]++;return api_1.TraceFlags.NONE;}else{cov_14ftmralbh().b[18][1]++;cov_14ftmralbh().s[76]++;if(xraySampledFlag===IS_SAMPLED){cov_14ftmralbh().b[20][0]++;cov_14ftmralbh().s[77]++;return api_1.TraceFlags.SAMPLED;}else{cov_14ftmralbh().b[20][1]++;cov_14ftmralbh().s[78]++;return null;}}}}cov_14ftmralbh().s[79]++;exports.AWSXRayPropagator=AWSXRayPropagator;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3pvY29uZy9Eb2N1bWVudHMvZm9ya2VkL29wZW50ZWxlbWV0cnktanMtY29udHJpYi9wcm9wYWdhdG9ycy9vcGVudGVsZW1ldHJ5LXByb3BhZ2F0b3ItYXdzLXhyYXkvc3JjL0FXU1hSYXlQcm9wYWdhdG9yLnRzIiwic291cmNlcyI6WyIvVXNlcnMvem9jb25nL0RvY3VtZW50cy9mb3JrZWQvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL3Byb3BhZ2F0b3JzL29wZW50ZWxlbWV0cnktcHJvcGFnYXRvci1hd3MteHJheS9zcmMvQVdTWFJheVByb3BhZ2F0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOzs7QUFFSCw0Q0FTNEI7QUFDNUIsOENBSzZCO0FBRWhCLFFBQUEsdUJBQXVCLEdBQUcsaUJBQWlCLENBQUM7QUFFekQsTUFBTSxzQkFBc0IsR0FBRyxHQUFHLENBQUM7QUFDbkMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDO0FBRXpCLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUM1QixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUM7QUFDM0IsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDN0IsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLENBQUM7QUFDckMsTUFBTSwwQkFBMEIsR0FBRyxFQUFFLENBQUM7QUFDdEMsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLENBQUM7QUFFckMsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDO0FBQy9CLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBRTVCLE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDO0FBQ25DLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQztBQUN2QixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDeEI7Ozs7Ozs7R0FPRztB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QUFDLE9BQU8sQ0FBQztTQUMzQjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7Q0FDRjtBQTNJRCw4Q0EySUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBDb250ZXh0LFxuICBIdHRwVGV4dFByb3BhZ2F0b3IsXG4gIFNwYW5Db250ZXh0LFxuICBUcmFjZUZsYWdzLFxuICBTZXR0ZXJGdW5jdGlvbixcbiAgR2V0dGVyRnVuY3Rpb24sXG4gIElOVkFMSURfVFJBQ0VfSUQsXG4gIElOVkFMSURfU1BBTl9JRCxcbn0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmltcG9ydCB7XG4gIGdldFBhcmVudFNwYW5Db250ZXh0LFxuICBzZXRFeHRyYWN0ZWRTcGFuQ29udGV4dCxcbiAgSU5WQUxJRF9TUEFOX0NPTlRFWFQsXG4gIGlzVmFsaWQsXG59IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2NvcmUnO1xuXG5leHBvcnQgY29uc3QgQVdTWFJBWV9UUkFDRV9JRF9IRUFERVIgPSAnWC1BbXpuLVRyYWNlLUlkJztcblxuY29uc3QgVFJBQ0VfSEVBREVSX0RFTElNSVRFUiA9ICc7JztcbmNvbnN0IEtWX0RFTElNSVRFUiA9ICc9JztcblxuY29uc3QgVFJBQ0VfSURfS0VZID0gJ1Jvb3QnO1xuY29uc3QgVFJBQ0VfSURfTEVOR1RIID0gMzU7XG5jb25zdCBUUkFDRV9JRF9WRVJTSU9OID0gXCIxXCI7XG5jb25zdCBUUkFDRV9JRF9ERUxJTUlURVIgPSAnLSc7XG5jb25zdCBUUkFDRV9JRF9ERUxJTUlURVJfSU5ERVhfMSA9IDE7XG5jb25zdCBUUkFDRV9JRF9ERUxJTUlURVJfSU5ERVhfMiA9IDEwO1xuY29uc3QgVFJBQ0VfSURfRklSU1RfUEFSVF9MRU5HVEggPSA4O1xuXG5jb25zdCBQQVJFTlRfSURfS0VZID0gJ1BhcmVudCc7XG5jb25zdCBQQVJFTlRfSURfTEVOR1RIID0gMTY7XG5cbmNvbnN0IFNBTVBMRURfRkxBR19LRVkgPSAnU2FtcGxlZCc7XG5jb25zdCBTQU1QTEVEX0ZMQUdfTEVOR1RIID0gMTtcbmNvbnN0IElTX1NBTVBMRUQgPSAnMSc7XG5jb25zdCBOT1RfU0FNUExFRCA9ICcwJztcbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIEFXUyBYLVJheSBUcmFjZSBIZWFkZXIgcHJvcGFnYXRpb24gcHJvdG9jb2wuIFNlZSA8YSBocmVmPVxuICogaHR0cHM6Ly9odHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20veHJheS9sYXRlc3QvZGV2Z3VpZGUveHJheS1jb25jZXB0cy5odG1sI3hyYXktY29uY2VwdHMtdHJhY2luZ2hlYWRlcj5BV1NcbiAqIFRyYWNpbmcgaGVhZGVyIHNwZWM8L2E+XG4gKiBcbiAqIEFuIGV4YW1wbGUgQVdTIFhyYXkgVHJhY2luZyBIZWFkZXIgaXMgc2hvd24gYmVsb3c6XG4gKiBYLUFtem4tVHJhY2UtSWQ6IFJvb3Q9MS01NzU5ZTk4OC1iZDg2MmUzZmUxYmU0NmE5OTQyNzI3OTM7UGFyZW50PTUzOTk1YzNmNDJjZDhhZDg7U2FtcGxlZD0xXG4gKi9cbmV4cG9ydCBjbGFzcyBBV1NYUmF5UHJvcGFnYXRvciBpbXBsZW1lbnRzIEh0dHBUZXh0UHJvcGFnYXRvciB7XG4gIGluamVjdChjb250ZXh0OiBDb250ZXh0LCBjYXJyaWVyOiB1bmtub3duLCBzZXR0ZXI6IFNldHRlckZ1bmN0aW9uKSB7XG4gICAgY29uc3Qgc3BhbkNvbnRleHQgPSBnZXRQYXJlbnRTcGFuQ29udGV4dChjb250ZXh0KTtcbiAgICBpZiAoIXNwYW5Db250ZXh0KSByZXR1cm47XG5cbiAgICBjb25zdCBvdFRyYWNlSWQgPSBzcGFuQ29udGV4dC50cmFjZUlkO1xuICAgIGNvbnN0IHhyYXlUcmFjZUlkID0gVFJBQ0VfSURfVkVSU0lPTlxuICAgICAgKyBUUkFDRV9JRF9ERUxJTUlURVJcbiAgICAgICsgb3RUcmFjZUlkLnN1YnN0cmluZygwLCBUUkFDRV9JRF9GSVJTVF9QQVJUX0xFTkdUSClcbiAgICAgICsgVFJBQ0VfSURfREVMSU1JVEVSXG4gICAgICArIG90VHJhY2VJZC5zdWJzdHJpbmcoVFJBQ0VfSURfRklSU1RfUEFSVF9MRU5HVEgpO1xuICAgIGNvbnN0IHBhcmVudElkID0gc3BhbkNvbnRleHQuc3BhbklkO1xuICAgIGNvbnN0IHNhbXBsaW5nRmxhZyA9IHNwYW5Db250ZXh0LnRyYWNlRmxhZ3M/IElTX1NBTVBMRUQ6IE5PVF9TQU1QTEVEO1xuICAgIC8vIFRPRE86IEFkZCBPVCB0cmFjZSBzdGF0ZSB0byB0aGUgWC1SYXkgdHJhY2UgaGVhZGVyXG5cbiAgICBjb25zdCB0cmFjZUhlYWRlciA9IFRSQUNFX0lEX0tFWVxuICAgICAgKyBLVl9ERUxJTUlURVJcbiAgICAgICsgeHJheVRyYWNlSWRcbiAgICAgICsgVFJBQ0VfSEVBREVSX0RFTElNSVRFUlxuICAgICAgKyBQQVJFTlRfSURfS0VZXG4gICAgICArIEtWX0RFTElNSVRFUlxuICAgICAgKyBwYXJlbnRJZFxuICAgICAgKyBUUkFDRV9IRUFERVJfREVMSU1JVEVSXG4gICAgICArIFNBTVBMRURfRkxBR19LRVlcbiAgICAgICsgS1ZfREVMSU1JVEVSXG4gICAgICArIHNhbXBsaW5nRmxhZztcblxuICAgIHNldHRlcihcbiAgICAgIGNhcnJpZXIsXG4gICAgICBBV1NYUkFZX1RSQUNFX0lEX0hFQURFUixcbiAgICAgIHRyYWNlSGVhZGVyXG4gICAgKTtcbiAgfVxuXG4gIGV4dHJhY3QoY29udGV4dDogQ29udGV4dCwgY2FycmllcjogdW5rbm93biwgZ2V0dGVyOiBHZXR0ZXJGdW5jdGlvbik6IENvbnRleHQge1xuICAgIGNvbnN0IHNwYW5Db250ZXh0ID0gdGhpcy5nZXRTcGFuQ29udGV4dEZyb21IZWFkZXIoY2FycmllciwgZ2V0dGVyKTtcbiAgICBpZiAoIWlzVmFsaWQoc3BhbkNvbnRleHQpKSByZXR1cm4gc2V0RXh0cmFjdGVkU3BhbkNvbnRleHQoY29udGV4dCwgc3BhbkNvbnRleHQpO1xuXG4gICAgcmV0dXJuIHNldEV4dHJhY3RlZFNwYW5Db250ZXh0KGNvbnRleHQsIHNwYW5Db250ZXh0KTtcbiAgfVxuICBcbiAgcHJpdmF0ZSBnZXRTcGFuQ29udGV4dEZyb21IZWFkZXIoY2FycmllcjogdW5rbm93biwgZ2V0dGVyOiBHZXR0ZXJGdW5jdGlvbik6IFNwYW5Db250ZXh0IHtcbiAgICBjb25zdCB0cmFjZUhlYWRlciA9IGdldHRlcihjYXJyaWVyLCBBV1NYUkFZX1RSQUNFX0lEX0hFQURFUik7XG4gICAgLy8gT25seSBpZiB0aGUgcmV0dXJuZWQgdHJhY2VIZWFkZXIgaXMgbm8gZW1wdHkgc3RyaW5nIGNhbiBiZSBleHRyYWN0ZWRcbiAgICAvLyBpZiAoIXRyYWNlSGVhZGVyIHx8IHR5cGVvZiB0cmFjZUhlYWRlciAhPT0gJ3N0cmluZycpIHJldHVybiBJTlZBTElEX1NQQU5fQ09OVEVYVDtcbiAgICBpZiAoIXRyYWNlSGVhZGVyIHx8IHR5cGVvZiB0cmFjZUhlYWRlciAhPT0gJ3N0cmluZycpIHJldHVybiB7dHJhY2VJZDogXCIxXCIsIHNwYW5JZDogXCIwXCIsIHRyYWNlRmxhZ3M6IFRyYWNlRmxhZ3MuTk9ORX07XG5cbiAgICBsZXQgcG9zID0gMCwgdHJpbW1lZFBhcnQ6IHN0cmluZztcbiAgICBsZXQgcGFyc2VkVHJhY2VJZCA9IElOVkFMSURfVFJBQ0VfSUQ7XG4gICAgbGV0IHBhcnNlZFNwYW5JZCA9IElOVkFMSURfU1BBTl9JRDtcbiAgICBsZXQgcGFyc2VkVHJhY2VGbGFncyA9IG51bGw7XG4gICAgd2hpbGUocG9zIDwgdHJhY2VIZWFkZXIubGVuZ3RoKSB7XG4gICAgICBjb25zdCBkZWxpbWl0ZXJJbmRleCA9IHRyYWNlSGVhZGVyLmluZGV4T2YoVFJBQ0VfSEVBREVSX0RFTElNSVRFUiwgcG9zKTtcbiAgICAgIGlmIChkZWxpbWl0ZXJJbmRleCA+PSAwKSB7XG4gICAgICAgIHRyaW1tZWRQYXJ0ID0gdHJhY2VIZWFkZXIuc3Vic3RyaW5nKHBvcywgZGVsaW1pdGVySW5kZXgpLnRyaW0oKTtcbiAgICAgICAgcG9zID0gZGVsaW1pdGVySW5kZXggKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9sYXN0IHBhcnRcbiAgICAgICAgdHJpbW1lZFBhcnQgPSB0cmFjZUhlYWRlci5zdWJzdHJpbmcocG9zKS50cmltKCk7XG4gICAgICAgIHBvcyA9IHRyYWNlSGVhZGVyLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVxdWFsc0luZGV4ID0gdHJpbW1lZFBhcnQuaW5kZXhPZihLVl9ERUxJTUlURVIpO1xuICAgICAgaWYgKGVxdWFsc0luZGV4IDwgMCkge1xuICAgICAgICAvLyByZXR1cm4gSU5WQUxJRF9TUEFOX0NPTlRFWFQ7XG4gICAgICAgIHJldHVybiB7dHJhY2VJZDogXCIyXCIsIHNwYW5JZDogXCIwXCIsIHRyYWNlRmxhZ3M6IFRyYWNlRmxhZ3MuTk9ORX1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsdWUgPSB0cmltbWVkUGFydC5zdWJzdHJpbmcoZXF1YWxzSW5kZXgpO1xuXG4gICAgICBpZiAodHJpbW1lZFBhcnQuc3RhcnRzV2l0aChUUkFDRV9JRF9LRVkpKSB7XG4gICAgICAgIHBhcnNlZFRyYWNlSWQgPSB0aGlzLl9wYXJzZVRyYWNlSWQodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHRyaW1tZWRQYXJ0LnN0YXJ0c1dpdGgoUEFSRU5UX0lEX0tFWSkpIHtcbiAgICAgICAgcGFyc2VkU3BhbklkID0gdGhpcy5fcGFyc2VTcGFuSWQodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHRyaW1tZWRQYXJ0LnN0YXJ0c1dpdGgoU0FNUExFRF9GTEFHX0tFWSkpIHtcbiAgICAgICAgcGFyc2VkVHJhY2VGbGFncyA9IHRoaXMuX3BhcnNlVHJhY2VGbGFnKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcnNlZFRyYWNlRmxhZ3MgPT09IG51bGwpIHtcbiAgICAgIC8vIHJldHVybiBJTlZBTElEX1NQQU5fQ09OVEVYVDtcbiAgICAgIHJldHVybiB7dHJhY2VJZDogXCIzXCIsIHNwYW5JZDogXCIwXCIsIHRyYWNlRmxhZ3M6IFRyYWNlRmxhZ3MuTk9ORX1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0U3BhbkNvbnRleHQ6IFNwYW5Db250ZXh0ID0ge1xuICAgICAgdHJhY2VJZDogcGFyc2VkVHJhY2VJZCxcbiAgICAgIHNwYW5JZDogcGFyc2VkU3BhbklkLFxuICAgICAgdHJhY2VGbGFnczogcGFyc2VkVHJhY2VGbGFncyxcbiAgICAgIGlzUmVtb3RlOiB0cnVlLFxuICAgIH1cbiAgICBpZiAoIWlzVmFsaWQocmVzdWx0U3BhbkNvbnRleHQpKSB7XG4gICAgICAvLyByZXR1cm4gSU5WQUxJRF9TUEFOX0NPTlRFWFQ7XG4gICAgICBpZiAocmVzdWx0U3BhbkNvbnRleHQudHJhY2VJZCA9PT0gSU5WQUxJRF9UUkFDRV9JRCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0U3BhbkNvbnRleHQ7XG4gICAgICB9XG4gICAgICAvLyBpZiAocmVzdWx0U3BhbkNvbnRleHQuc3BhbklkID09PSBJTlZBTElEX1NQQU5fSUQpIHtcbiAgICAgIC8vICAgcmV0dXJuIHt0cmFjZUlkOiBcIjVcIiwgc3BhbklkOiBcIjBcIiwgdHJhY2VGbGFnczogVHJhY2VGbGFncy5OT05FfVxuICAgICAgLy8gfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0U3BhbkNvbnRleHQ7XG4gIH1cblxuICBwcml2YXRlIF9wYXJzZVRyYWNlSWQoeHJheVRyYWNlSWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHhyYXlUcmFjZUlkLmxlbmd0aCAhPT0gVFJBQ0VfSURfTEVOR1RIKSB7XG4gICAgICAvLyByZXR1cm4gSU5WQUxJRF9UUkFDRV9JRDtcbiAgICAgIHJldHVybiB4cmF5VHJhY2VJZDtcbiAgICB9XG5cbiAgICAvLyBDaGNlayB2ZXJzaW9uIHRyYWNlIGlkIHZlcnNpb25cbiAgICBpZiAoIXhyYXlUcmFjZUlkLnN0YXJ0c1dpdGgoVFJBQ0VfSURfVkVSU0lPTikpIHtcbiAgICAgIC8vIHJldHVybiBJTlZBTElEX1RSQUNFX0lEO1xuICAgICAgcmV0dXJuICc2JztcbiAgICB9XG5cbiAgICAvLyBDaGVjayBkZWxpbWl0ZXJzXG4gICAgaWYgKHhyYXlUcmFjZUlkLmNoYXJBdChUUkFDRV9JRF9ERUxJTUlURVJfSU5ERVhfMSkgIT09IFRSQUNFX0lEX0RFTElNSVRFUlxuICAgIHx8IHhyYXlUcmFjZUlkLmNoYXJBdChUUkFDRV9JRF9ERUxJTUlURVJfSU5ERVhfMikgIT09IFRSQUNFX0lEX0RFTElNSVRFUikge1xuICAgICAgLy8gcmV0dXJuIElOVkFMSURfVFJBQ0VfSUQ7XG4gICAgICByZXR1cm4gJzcnO1xuICAgIH1cblxuICAgIGNvbnN0IGVwb2NoUGFydCA9IHhyYXlUcmFjZUlkLnN1YnN0cmluZyhUUkFDRV9JRF9ERUxJTUlURVJfSU5ERVhfMSArIDEsIFRSQUNFX0lEX0RFTElNSVRFUl9JTkRFWF8yKTtcbiAgICBjb25zdCB1bmlxdWVQYXJ0ID0geHJheVRyYWNlSWQuc3Vic3RyaW5nKFRSQUNFX0lEX0RFTElNSVRFUl9JTkRFWF8yICsgMSwgVFJBQ0VfSURfTEVOR1RIKTtcblxuICAgIHJldHVybiBlcG9jaFBhcnQgKyB1bmlxdWVQYXJ0O1xuICB9XG5cbiAgcHJpdmF0ZSBfcGFyc2VTcGFuSWQoeHJheVBhcmVudElkOiBzdHJpbmcpOiBzdHJpbmd7XG4gICAgcmV0dXJuICh4cmF5UGFyZW50SWQubGVuZ3RoID09PSBQQVJFTlRfSURfTEVOR1RIKT8geHJheVBhcmVudElkOiBJTlZBTElEX1NQQU5fSUQ7XG4gIH1cblxuICBwcml2YXRlIF9wYXJzZVRyYWNlRmxhZyh4cmF5U2FtcGxlZEZsYWc6IHN0cmluZyk6IFRyYWNlRmxhZ3MgfCBudWxsIHtcbiAgICBpZiAoeHJheVNhbXBsZWRGbGFnLmxlbmd0aCAhPT0gU0FNUExFRF9GTEFHX0xFTkdUSCB8fCB4cmF5U2FtcGxlZEZsYWcgPT09IE5PVF9TQU1QTEVEKSB7XG4gICAgICByZXR1cm4gVHJhY2VGbGFncy5OT05FO1xuICAgIH0gZWxzZSBpZiAoeHJheVNhbXBsZWRGbGFnID09PSBJU19TQU1QTEVEKSB7XG4gICAgICByZXR1cm4gVHJhY2VGbGFncy5TQU1QTEVEO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,