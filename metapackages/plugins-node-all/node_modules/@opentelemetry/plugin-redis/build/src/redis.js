"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = exports.RedisPlugin = void 0;
const core_1 = require("@opentelemetry/core");
const shimmer = require("shimmer");
const utils_1 = require("./utils");
const version_1 = require("./version");
class RedisPlugin extends core_1.BasePlugin {
    constructor(moduleName) {
        super('@opentelemetry/plugin-redis', version_1.VERSION);
        this.moduleName = moduleName;
        this.supportedVersions = ['^2.6.0']; // equivalent to >= 2.6.0 <3
    }
    patch() {
        if (this._moduleExports.RedisClient) {
            this._logger.debug('Patching redis.RedisClient.prototype.internal_send_command');
            shimmer.wrap(this._moduleExports.RedisClient.prototype, 'internal_send_command', this._getPatchInternalSendCommand());
            this._logger.debug('patching redis.create_stream');
            shimmer.wrap(this._moduleExports.RedisClient.prototype, 'create_stream', this._getPatchCreateStream());
            this._logger.debug('patching redis.createClient');
            shimmer.wrap(this._moduleExports, 'createClient', this._getPatchCreateClient());
        }
        return this._moduleExports;
    }
    unpatch() {
        if (this._moduleExports) {
            shimmer.unwrap(this._moduleExports.RedisClient.prototype, 'internal_send_command');
            shimmer.unwrap(this._moduleExports.RedisClient.prototype, 'create_stream');
            shimmer.unwrap(this._moduleExports, 'createClient');
        }
    }
    /**
     * Patch internal_send_command(...) to trace requests
     */
    _getPatchInternalSendCommand() {
        const tracer = this._tracer;
        return function internal_send_command(original) {
            return utils_1.getTracedInternalSendCommand(tracer, original);
        };
    }
    _getPatchCreateClient() {
        const tracer = this._tracer;
        return function createClient(original) {
            return utils_1.getTracedCreateClient(tracer, original);
        };
    }
    _getPatchCreateStream() {
        const tracer = this._tracer;
        return function createReadStream(original) {
            return utils_1.getTracedCreateStreamTrace(tracer, original);
        };
    }
}
exports.RedisPlugin = RedisPlugin;
RedisPlugin.COMPONENT = 'redis';
exports.plugin = new RedisPlugin(RedisPlugin.COMPONENT);
//# sourceMappingURL=redis.js.map