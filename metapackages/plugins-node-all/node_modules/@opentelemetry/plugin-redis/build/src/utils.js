"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTracedInternalSendCommand = exports.getTracedCreateStreamTrace = exports.getTracedCreateClient = void 0;
const api_1 = require("@opentelemetry/api");
const redis_1 = require("./redis");
const enums_1 = require("./enums");
const endSpan = (span, err) => {
    if (err) {
        span.setStatus({
            code: api_1.CanonicalCode.UNKNOWN,
            message: err.message,
        });
    }
    else {
        span.setStatus({ code: api_1.CanonicalCode.OK });
    }
    span.end();
};
exports.getTracedCreateClient = (tracer, original) => {
    return function createClientTrace() {
        const client = original.apply(this, arguments);
        return tracer.bind(client);
    };
};
exports.getTracedCreateStreamTrace = (tracer, original) => {
    return function create_stream_trace() {
        if (!this.stream) {
            Object.defineProperty(this, 'stream', {
                get() {
                    return this._patched_redis_stream;
                },
                set(val) {
                    tracer.bind(val);
                    this._patched_redis_stream = val;
                },
            });
        }
        return original.apply(this, arguments);
    };
};
exports.getTracedInternalSendCommand = (tracer, original) => {
    return function internal_send_command_trace(cmd) {
        // New versions of redis (2.4+) use a single options object
        // instead of named arguments
        if (arguments.length === 1 && typeof cmd === 'object') {
            const span = tracer.startSpan(`${redis_1.RedisPlugin.COMPONENT}-${cmd.command}`, {
                kind: api_1.SpanKind.CLIENT,
                attributes: {
                    [enums_1.AttributeNames.COMPONENT]: redis_1.RedisPlugin.COMPONENT,
                    [enums_1.AttributeNames.DB_STATEMENT]: cmd.command,
                },
            });
            // Set attributes for not explicitly typed RedisPluginClientTypes
            if (this.options) {
                span.setAttributes({
                    [enums_1.AttributeNames.PEER_HOSTNAME]: this.options.host,
                    [enums_1.AttributeNames.PEER_PORT]: this.options.port,
                });
            }
            if (this.address) {
                span.setAttribute(enums_1.AttributeNames.PEER_ADDRESS, `redis://${this.address}`);
            }
            const originalCallback = arguments[0].callback;
            if (originalCallback) {
                arguments[0].callback = function callback(err, _reply) {
                    endSpan(span, err);
                    return originalCallback.apply(this, arguments);
                };
            }
            try {
                // Span will be ended in callback
                return original.apply(this, arguments);
            }
            catch (rethrow) {
                endSpan(span, rethrow);
                throw rethrow; // rethrow after ending span
            }
        }
        // We don't know how to trace this call, so don't start/stop a span
        return original.apply(this, arguments);
    };
};
//# sourceMappingURL=utils.js.map