"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = exports.MysqlPlugin = void 0;
const core_1 = require("@opentelemetry/core");
const api_1 = require("@opentelemetry/api");
const shimmer = require("shimmer");
const enums_1 = require("./enums");
const utils_1 = require("./utils");
const version_1 = require("./version");
class MysqlPlugin extends core_1.BasePlugin {
    constructor(moduleName) {
        super('@opentelemetry/plugin-mysql', version_1.VERSION);
        this.moduleName = moduleName;
        this.supportedVersions = ['2.*'];
        this._enabled = false;
    }
    patch() {
        this._enabled = true;
        shimmer.wrap(this._moduleExports, 'createConnection', this._patchCreateConnection());
        shimmer.wrap(this._moduleExports, 'createPool', this._patchCreatePool());
        shimmer.wrap(this._moduleExports, 'createPoolCluster', this._patchCreatePoolCluster());
        return this._moduleExports;
    }
    unpatch() {
        this._enabled = false;
        shimmer.unwrap(this._moduleExports, 'createConnection');
        shimmer.unwrap(this._moduleExports, 'createPool');
        shimmer.unwrap(this._moduleExports, 'createPoolCluster');
    }
    // global export function
    _patchCreateConnection() {
        return (originalCreateConnection) => {
            const thisPlugin = this;
            thisPlugin._logger.debug('MysqlPlugin#patch: patched mysql createConnection');
            return function createConnection(_connectionUri) {
                const originalResult = originalCreateConnection(...arguments);
                // This is unwrapped on next call after unpatch
                shimmer.wrap(originalResult, 'query', thisPlugin._patchQuery(originalResult));
                return originalResult;
            };
        };
    }
    // global export function
    _patchCreatePool() {
        return (originalCreatePool) => {
            const thisPlugin = this;
            thisPlugin._logger.debug('MysqlPlugin#patch: patched mysql createPool');
            return function createPool(_config) {
                const pool = originalCreatePool(...arguments);
                shimmer.wrap(pool, 'query', thisPlugin._patchQuery(pool));
                shimmer.wrap(pool, 'getConnection', thisPlugin._patchGetConnection(pool));
                return pool;
            };
        };
    }
    // global export function
    _patchCreatePoolCluster() {
        return (originalCreatePoolCluster) => {
            const thisPlugin = this;
            thisPlugin._logger.debug('MysqlPlugin#patch: patched mysql createPoolCluster');
            return function createPool(_config) {
                const cluster = originalCreatePoolCluster(...arguments);
                // This is unwrapped on next call after unpatch
                shimmer.wrap(cluster, 'getConnection', thisPlugin._patchGetConnection(cluster));
                return cluster;
            };
        };
    }
    // method on cluster or pool
    _patchGetConnection(pool) {
        return (originalGetConnection) => {
            const thisPlugin = this;
            thisPlugin._logger.debug('MysqlPlugin#patch: patched mysql pool getConnection');
            return function getConnection(arg1, arg2, arg3) {
                // Unwrap if unpatch has been called
                if (!thisPlugin._enabled) {
                    shimmer.unwrap(pool, 'getConnection');
                    return originalGetConnection.apply(pool, arguments);
                }
                if (arguments.length === 1 && typeof arg1 === 'function') {
                    const patchFn = thisPlugin._getConnectionCallbackPatchFn(arg1);
                    return originalGetConnection.call(pool, patchFn);
                }
                if (arguments.length === 2 && typeof arg2 === 'function') {
                    const patchFn = thisPlugin._getConnectionCallbackPatchFn(arg2);
                    return originalGetConnection.call(pool, arg1, patchFn);
                }
                if (arguments.length === 3 && typeof arg3 === 'function') {
                    const patchFn = thisPlugin._getConnectionCallbackPatchFn(arg3);
                    return originalGetConnection.call(pool, arg1, arg2, patchFn);
                }
                return originalGetConnection.apply(pool, arguments);
            };
        };
    }
    _getConnectionCallbackPatchFn(cb) {
        const thisPlugin = this;
        return function () {
            if (arguments[1]) {
                // this is the callback passed into a query
                // no need to unwrap
                if (!core_1.isWrapped(arguments[1].query)) {
                    shimmer.wrap(arguments[1], 'query', thisPlugin._patchQuery(arguments[1]));
                }
            }
            if (typeof cb === 'function') {
                cb(...arguments);
            }
        };
    }
    _patchQuery(connection) {
        return (originalQuery) => {
            const thisPlugin = this;
            thisPlugin._logger.debug('MysqlPlugin: patched mysql query');
            return function query(query, _valuesOrCallback, _callback) {
                if (!thisPlugin._enabled) {
                    shimmer.unwrap(connection, 'query');
                    return originalQuery.apply(connection, arguments);
                }
                const spanName = utils_1.getSpanName(query);
                const span = thisPlugin._tracer.startSpan(spanName, {
                    kind: api_1.SpanKind.CLIENT,
                    attributes: Object.assign(Object.assign({}, MysqlPlugin.COMMON_ATTRIBUTES), utils_1.getConnectionAttributes(connection.config)),
                });
                if (typeof query === 'string') {
                    span.setAttribute(enums_1.AttributeNames.DB_STATEMENT, query);
                }
                else if (typeof query === 'object') {
                    if (query.sql) {
                        span.setAttribute(enums_1.AttributeNames.DB_STATEMENT, query.sql);
                    }
                    if (query.values) {
                        span.setAttribute(enums_1.AttributeNames.MYSQL_VALUES, query.values);
                    }
                }
                if (arguments.length === 1) {
                    const streamableQuery = originalQuery.apply(connection, arguments);
                    return streamableQuery
                        .on('error', err => span.setStatus({
                        code: api_1.CanonicalCode.UNKNOWN,
                        message: err.message,
                    }))
                        .on('end', () => {
                        span.end();
                    });
                }
                if (typeof arguments[1] === 'function') {
                    shimmer.wrap(arguments, 1, thisPlugin._patchCallbackQuery(span));
                }
                else if (typeof arguments[2] === 'function') {
                    if (Array.isArray(_valuesOrCallback)) {
                        span.setAttribute(enums_1.AttributeNames.MYSQL_VALUES, _valuesOrCallback);
                    }
                    else if (arguments[2]) {
                        span.setAttribute(enums_1.AttributeNames.MYSQL_VALUES, [_valuesOrCallback]);
                    }
                    shimmer.wrap(arguments, 2, thisPlugin._patchCallbackQuery(span));
                }
                return originalQuery.apply(connection, arguments);
            };
        };
    }
    _patchCallbackQuery(span) {
        return (originalCallback) => {
            return function (err, results, fields) {
                if (err) {
                    span.setStatus({
                        code: api_1.CanonicalCode.UNKNOWN,
                        message: err.message,
                    });
                }
                else {
                    span.setStatus({
                        code: api_1.CanonicalCode.OK,
                    });
                }
                span.end();
                return originalCallback(...arguments);
            };
        };
    }
}
exports.MysqlPlugin = MysqlPlugin;
MysqlPlugin.COMPONENT = 'mysql';
MysqlPlugin.DB_TYPE = 'sql';
MysqlPlugin.COMMON_ATTRIBUTES = {
    [enums_1.AttributeNames.COMPONENT]: MysqlPlugin.COMPONENT,
    [enums_1.AttributeNames.DB_TYPE]: MysqlPlugin.DB_TYPE,
    [enums_1.AttributeNames.PEER_SERVICE]: MysqlPlugin.COMPONENT,
};
exports.plugin = new MysqlPlugin(MysqlPlugin.COMPONENT);
//# sourceMappingURL=mysql.js.map