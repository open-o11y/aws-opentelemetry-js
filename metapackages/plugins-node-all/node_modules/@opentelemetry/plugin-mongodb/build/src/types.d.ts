export declare type Func<T> = (...args: unknown[]) => T;
export declare type MongoInternalCommand = {
    findandmodify: boolean;
    createIndexes: boolean;
    count: boolean;
    ismaster: boolean;
    indexes?: unknown[];
    query?: {
        [key: string]: unknown;
    };
    q?: {
        [key: string]: unknown;
    };
};
export declare type MongoInternalTopology = {
    s?: {
        options?: {
            host?: string;
            port?: number;
            servername?: string;
        };
        host?: string;
        port?: number;
    };
};
export declare enum AttributeNames {
    COMPONENT = "component",
    DB_TYPE = "db.type",
    DB_INSTANCE = "db.instance",
    DB_STATEMENT = "db.statement",
    PEER_ADDRESS = "peer.address",
    PEER_HOSTNAME = "peer.host",
    PEER_PORT = "peer.port",
    PEER_IPV4 = "peer.ipv4",
    PEER_IPV6 = "peer.ipv6",
    PEER_SERVICE = "peer.service"
}
export declare enum MongodbCommandType {
    CREATE_INDEXES = "createIndexes",
    FIND_AND_MODIFY = "findAndModify",
    IS_MASTER = "isMaster",
    COUNT = "count",
    UNKNOWN = "unknown"
}
//# sourceMappingURL=types.d.ts.map